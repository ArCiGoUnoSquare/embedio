{
  "api/Unosquare.Labs.EmbedIO.Modules.WebApiHandlerAttribute.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.WebApiHandlerAttribute.html",
    "title": "Class WebApiHandlerAttribute | Unosquare EmbedIO",
    "keywords": "Class WebApiHandlerAttribute Decorate methods within controllers with this attribute in order to make them callable from the Web API Module Method Must match the WebServerModule. Inheritance System.Object WebApiHandlerAttribute Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class WebApiHandlerAttribute : Attribute Constructors | Improve this Doc View Source WebApiHandlerAttribute(HttpVerbs, String) Initializes a new instance of the WebApiHandlerAttribute class. Declaration public WebApiHandlerAttribute(HttpVerbs verb, string path) Parameters Type Name Description HttpVerbs verb The verb. System.String path The path. | Improve this Doc View Source WebApiHandlerAttribute(HttpVerbs, String[]) Initializes a new instance of the WebApiHandlerAttribute class. Declaration public WebApiHandlerAttribute(HttpVerbs verb, string[] paths) Parameters Type Name Description HttpVerbs verb The verb. System.String [] paths The paths. Properties | Improve this Doc View Source Paths Gets or sets the paths. Declaration public string[] Paths { get; protected set; } Property Value Type Description System.String [] The paths. | Improve this Doc View Source Verb Gets or sets the verb. Declaration public HttpVerbs Verb { get; protected set; } Property Value Type Description HttpVerbs The verb."
  },
  "api/Unosquare.Labs.EmbedIO.Modules.WebSocketsModule.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.WebSocketsModule.html",
    "title": "Class WebSocketsModule | Unosquare EmbedIO",
    "keywords": "Class WebSocketsModule A WebSockets module conforming to RFC 6455 Works only on Chrome 16+, FireFox 11+ and IE 10+ This module is experimental and still needs extensive testing. Inheritance System.Object WebModuleBase WebSocketsModule Inherited Members WebModuleBase.Handlers WebModuleBase.Server WebModuleBase.AddHandler(String, HttpVerbs, ResponseHandler) Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class WebSocketsModule : WebModuleBase, IWebModule Constructors | Improve this Doc View Source WebSocketsModule() Initialize WebSocket module Declaration public WebSocketsModule() Properties | Improve this Doc View Source Name Gets the name of this module. Declaration public override string Name { get; } Property Value Type Description System.String The name. Overrides WebModuleBase.Name Methods | Improve this Doc View Source RegisterWebSocketsServer(Type) Registers the web sockets server given a WebSocketsServer Type. Declaration public void RegisterWebSocketsServer(Type socketType) Parameters Type Name Description Type socketType | Improve this Doc View Source RegisterWebSocketsServer<T>() Registers the web sockets server given a WebSocketsServer Type. Declaration public void RegisterWebSocketsServer<T>()where T : WebSocketsServer, new () Type Parameters Name Description T | Improve this Doc View Source RegisterWebSocketsServer<T>(String) Registers the web sockets server given a WebSocketsServer Type. Declaration public void RegisterWebSocketsServer<T>(string path)where T : WebSocketsServer, new () Parameters Type Name Description System.String path The path. For example: '/echo' Type Parameters Name Description T | Improve this Doc View Source RegisterWebSocketsServer<T>(String, T) Registers the web sockets server. Declaration public void RegisterWebSocketsServer<T>(string path, T server)where T : WebSocketsServer Parameters Type Name Description System.String path The path. For example: '/echo' T server The server. Type Parameters Name Description T"
  },
  "api/Unosquare.Labs.EmbedIO.Modules.WebSocketsServer.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.WebSocketsServer.html",
    "title": "Class WebSocketsServer | Unosquare EmbedIO",
    "keywords": "Class WebSocketsServer A base class that defines how to handle WebSockets connections. It keeps a list of connected WebSockets and has the basic logic to handle connections and data transmission Inheritance System.Object WebSocketsServer WebSocketsChatServer WebSocketsTerminalServer Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public abstract class WebSocketsServer : IDisposable Constructors | Improve this Doc View Source WebSocketsServer() Initializes a new instance of the WebSocketsServer class. With dead connection watchdog and no message size checks. Declaration protected WebSocketsServer() | Improve this Doc View Source WebSocketsServer(Boolean, Int32) Initializes a new instance of the WebSocketsServer class. Declaration protected WebSocketsServer(bool enableConnectionWatchdog, int maxMessageSize) Parameters Type Name Description System.Boolean enableConnectionWatchdog if set to true [enable connection watchdog]. System.Int32 maxMessageSize Maximum size of the message in bytes. Enter 0 or negative number to prevent checks. Properties | Improve this Doc View Source ServerName Gets the name of the server. Declaration public abstract string ServerName { get; } Property Value Type Description System.String The name of the server. | Improve this Doc View Source WebServer WebServer internal instance Declaration public WebServer WebServer { get; protected set; } Property Value Type Description WebServer | Improve this Doc View Source WebSockets Gets the Currently-Connected WebSockets. Declaration public ReadOnlyCollection<WebSocketContext> WebSockets { get; } Property Value Type Description ReadOnlyCollection < WebSocketContext > The web sockets. Methods | Improve this Doc View Source AcceptWebSocket(WebServer, HttpListenerContext) Accepts the WebSocket connection. This is a blocking call so it must be called within an independent thread. Declaration public void AcceptWebSocket(WebServer server, HttpListenerContext context) Parameters Type Name Description WebServer server The server. HttpListenerContext context The context. | Improve this Doc View Source Broadcast(Byte[]) Broadcasts the specified payload to all connected WebSockets clients. Declaration protected virtual void Broadcast(byte[] payload) Parameters Type Name Description System.Byte [] payload The payload. | Improve this Doc View Source Broadcast(String) Broadcasts the specified payload to all connected WebSockets clients. Declaration protected virtual void Broadcast(string payload) Parameters Type Name Description System.String payload The payload. | Improve this Doc View Source Close(WebSocketContext) Closes the specified web socket, removes it and disposes it. Declaration protected virtual void Close(WebSocketContext webSocket) Parameters Type Name Description WebSocketContext webSocket The web socket. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposeAll) Parameters Type Name Description System.Boolean disposeAll true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source OnClientConnected(WebSocketContext) Called when this WebSockets Server accepts a new WebSockets client. Declaration protected abstract void OnClientConnected(WebSocketContext context) Parameters Type Name Description WebSocketContext context The context. | Improve this Doc View Source OnClientDisconnected(WebSocketContext) Called when the server has removed a WebSockets connected client for any reason. Declaration protected abstract void OnClientDisconnected(WebSocketContext context) Parameters Type Name Description WebSocketContext context The context. | Improve this Doc View Source OnFrameReceived(WebSocketContext, Byte[], WebSocketReceiveResult) Called when this WebSockets Server receives a message frame regardless if the frame represents the EndOfMessage. Declaration protected abstract void OnFrameReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult) Parameters Type Name Description WebSocketContext context The context. System.Byte [] rxBuffer The response buffer. WebSocketReceiveResult rxResult The response result. | Improve this Doc View Source OnMessageReceived(WebSocketContext, Byte[], WebSocketReceiveResult) Called when this WebSockets Server receives a full message (EndOfMessage) form a WebSockets client. Declaration protected abstract void OnMessageReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult) Parameters Type Name Description WebSocketContext context The context. System.Byte [] rxBuffer The response buffer. WebSocketReceiveResult rxResult The response result. | Improve this Doc View Source Send(WebSocketContext, Byte[]) Sends a binary payload Declaration protected virtual void Send(WebSocketContext webSocket, byte[] payload) Parameters Type Name Description WebSocketContext webSocket The web socket. System.Byte [] payload The payload. | Improve this Doc View Source Send(WebSocketContext, String) Sends a UTF-8 payload Declaration protected virtual void Send(WebSocketContext webSocket, string payload) Parameters Type Name Description WebSocketContext webSocket The web socket. System.String payload The payload."
  },
  "api/Unosquare.Labs.EmbedIO.RoutingStrategy.html": {
    "href": "api/Unosquare.Labs.EmbedIO.RoutingStrategy.html",
    "title": "Enum RoutingStrategy | Unosquare EmbedIO",
    "keywords": "Enum RoutingStrategy Defines the routing strategy for URL matching This is especially useful for REST service implementations in the WebApi module. Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public enum RoutingStrategy : int Fields Name Description Regex The Regex strategy Wildcard The wildcard strategy, default one"
  },
  "api/Unosquare.Labs.EmbedIO.Samples.PeopleController.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Samples.PeopleController.html",
    "title": "Class PeopleController | Unosquare EmbedIO",
    "keywords": "Class PeopleController A very simple controller to handle People CRUD. Notice how it Inherits from WebApiController and the methods have WebApiHandler attributes This is for sampling purposes only. Inheritance System.Object WebApiController PeopleController Namespace :Unosquare.Labs.EmbedIO.Samples Assembly :Unosquare.Labs.EmbedIO.Samples.dll Syntax public class PeopleController : WebApiController Methods | Improve this Doc View Source Echo(WebServer, HttpListenerContext) Echoes the request form data in JSON format Declaration public bool Echo(WebServer server, HttpListenerContext context) Parameters Type Name Description WebServer server The server. HttpListenerContext context The context. Returns Type Description System.Boolean | Improve this Doc View Source GetPeople(WebServer, HttpListenerContext) Gets the people. This will respond to GET http://localhost:9696/api/people/ GET http://localhost:9696/api/people/1 GET http://localhost:9696/api/people/{n} Notice the wildcard is important Declaration public bool GetPeople(WebServer server, HttpListenerContext context) Parameters Type Name Description WebServer server The server. HttpListenerContext context The context. Returns Type Description System.Boolean | Improve this Doc View Source HandleError(HttpListenerContext, Exception, Int32) Handles the error returning an error status code and json-encoded body. Declaration protected bool HandleError(HttpListenerContext context, Exception ex, int statusCode = 500) Parameters Type Name Description HttpListenerContext context The context. Exception ex The ex. System.Int32 statusCode The HTTP status code. Returns Type Description System.Boolean | Improve this Doc View Source PostPeople(WebServer, HttpListenerContext) Posts the people Tubular model. This will respond to GET http://localhost:9696/api/people/ GET http://localhost:9696/api/people/1 GET http://localhost:9696/api/people/{n} Notice the wildcard is important Declaration public Task<bool> PostPeople(WebServer server, HttpListenerContext context) Parameters Type Name Description WebServer server The server. HttpListenerContext context The context. Returns Type Description Task < System.Boolean >"
  },
  "api/Unosquare.Labs.EmbedIO.Samples.WebSocketsChatServer.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Samples.WebSocketsChatServer.html",
    "title": "Class WebSocketsChatServer | Unosquare EmbedIO",
    "keywords": "Class WebSocketsChatServer Defines a very simple chat server Inheritance System.Object WebSocketsServer WebSocketsChatServer Inherited Members WebSocketsServer.WebServer WebSocketsServer.WebSockets WebSocketsServer.AcceptWebSocket(WebServer, HttpListenerContext) WebSocketsServer.Send(WebSocketContext, String) WebSocketsServer.Send(WebSocketContext, Byte[]) WebSocketsServer.Broadcast(Byte[]) WebSocketsServer.Broadcast(String) WebSocketsServer.Close(WebSocketContext) WebSocketsServer.Dispose() WebSocketsServer.Dispose(Boolean) Namespace :Unosquare.Labs.EmbedIO.Samples Assembly :Unosquare.Labs.EmbedIO.Samples.dll Syntax public class WebSocketsChatServer : WebSocketsServer Constructors | Improve this Doc View Source WebSocketsChatServer() Declaration public WebSocketsChatServer() Properties | Improve this Doc View Source ServerName Gets the name of the server. Declaration public override string ServerName { get; } Property Value Type Description System.String The name of the server. Overrides WebSocketsServer.ServerName Methods | Improve this Doc View Source OnClientConnected(WebSocketContext) Called when this WebSockets Server accepts a new WebSockets client. Declaration protected override void OnClientConnected(WebSocketContext context) Parameters Type Name Description WebSocketContext context The context. Overrides WebSocketsServer.OnClientConnected(WebSocketContext) | Improve this Doc View Source OnClientDisconnected(WebSocketContext) Called when the server has removed a WebSockets connected client for any reason. Declaration protected override void OnClientDisconnected(WebSocketContext context) Parameters Type Name Description WebSocketContext context The context. Overrides WebSocketsServer.OnClientDisconnected(WebSocketContext) | Improve this Doc View Source OnFrameReceived(WebSocketContext, Byte[], WebSocketReceiveResult) Called when this WebSockets Server receives a message frame regardless if the frame represents the EndOfMessage. Declaration protected override void OnFrameReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult) Parameters Type Name Description WebSocketContext context The context. System.Byte [] rxBuffer The rx buffer. WebSocketReceiveResult rxResult The rx result. | Improve this Doc View Source OnMessageReceived(WebSocketContext, Byte[], WebSocketReceiveResult) Called when this WebSockets Server receives a full message (EndOfMessage) form a WebSockets client. Declaration protected override void OnMessageReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult) Parameters Type Name Description WebSocketContext context The context. System.Byte [] rxBuffer The rx buffer. WebSocketReceiveResult rxResult The rx result."
  },
  "api/Unosquare.Labs.EmbedIO.Samples.WebSocketsSample.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Samples.WebSocketsSample.html",
    "title": "Class WebSocketsSample | Unosquare EmbedIO",
    "keywords": "Class WebSocketsSample Inheritance System.Object WebSocketsSample Namespace :Unosquare.Labs.EmbedIO.Samples Assembly :Unosquare.Labs.EmbedIO.Samples.dll Syntax public static class WebSocketsSample : object Methods | Improve this Doc View Source Setup(WebServer) Setups the specified server. Declaration public static void Setup(WebServer server) Parameters Type Name Description WebServer server The server."
  },
  "api/Unosquare.Labs.EmbedIO.SessionInfo.html": {
    "href": "api/Unosquare.Labs.EmbedIO.SessionInfo.html",
    "title": "Class SessionInfo | Unosquare EmbedIO",
    "keywords": "Class SessionInfo Represents the contents of an HTTP Session Inheritance System.Object SessionInfo Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class SessionInfo : object Constructors | Improve this Doc View Source SessionInfo() Initialize Session data Declaration public SessionInfo() Properties | Improve this Doc View Source Data Current Session Data Repository Declaration public ConcurrentDictionary<string, object> Data { get; protected set; } Property Value Type Description ConcurrentDictionary < System.String , System.Object > | Improve this Doc View Source DateCreated Current Session creation date Declaration public DateTime DateCreated { get; set; } Property Value Type Description DateTime | Improve this Doc View Source Item[String] Retrieve an item or set an item. If the key does not exist, it returns null. This is an indexer providing a shortcut to the underlying Data dictionary Declaration public object this[string key] { get; set; } Parameters Type Name Description System.String key Property Value Type Description System.Object | Improve this Doc View Source LastActivity Current Session last activity date Declaration public DateTime LastActivity { get; set; } Property Value Type Description DateTime | Improve this Doc View Source SessionId Current Session Identifier Declaration public string SessionId { get; set; } Property Value Type Description System.String"
  },
  "api/Unosquare.Labs.EmbedIO.WebModuleBase.html": {
    "href": "api/Unosquare.Labs.EmbedIO.WebModuleBase.html",
    "title": "Class WebModuleBase | Unosquare EmbedIO",
    "keywords": "Class WebModuleBase Base class to define custom web modules inherit from this class and use the AddHandler Method to register your method calls Inheritance System.Object WebModuleBase CorsModule FallbackModule LocalSessionModule StaticFilesModule WebApiModule WebSocketsModule Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public abstract class WebModuleBase : object, IWebModule Constructors | Improve this Doc View Source WebModuleBase() Initializes a new instance of the WebModuleBase class. Declaration protected WebModuleBase() Properties | Improve this Doc View Source Handlers Gets the registered handlers. Use the AddHandler method to register Handlers Declaration public ModuleMap Handlers { get; protected set; } Property Value Type Description ModuleMap The handlers. Implements IWebModule.Handlers | Improve this Doc View Source Name Gets the name of this module. Declaration public abstract string Name { get; } Property Value Type Description System.String The name. Implements IWebModule.Name | Improve this Doc View Source Server Gets the associated Web Server object. This property is automatically set when the module is registered Declaration public WebServer Server { get; set; } Property Value Type Description WebServer The server. Implements IWebModule.Server Methods | Improve this Doc View Source AddHandler(String, HttpVerbs, ResponseHandler) Adds a method handler for a given path and verb Declaration public void AddHandler(string path, HttpVerbs verb, ResponseHandler handler) Parameters Type Name Description System.String path The path. HttpVerbs verb The verb. ResponseHandler handler The handler. Implements IWebModule.AddHandler(String, HttpVerbs, ResponseHandler)"
  },
  "api/Unosquare.Labs.EmbedIO.WebServer.html": {
    "href": "api/Unosquare.Labs.EmbedIO.WebServer.html",
    "title": "Class WebServer | Unosquare EmbedIO",
    "keywords": "Class WebServer Represents our tiny web server used to handle requests Inheritance System.Object WebServer Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class WebServer : IDisposable Constructors | Improve this Doc View Source WebServer() Initializes a new instance of the WebServer class. This constructor does not provide any Logging capabilities. Declaration public WebServer() | Improve this Doc View Source WebServer(Int32) Initializes a new instance of the WebServer class. This constructor does not provide any Logging capabilities. Declaration public WebServer(int port) Parameters Type Name Description System.Int32 port The port. | Improve this Doc View Source WebServer(String, RoutingStrategy) Initializes a new instance of the WebServer class. This constructor does not provide any Logging capabilities. Declaration public WebServer(string urlPrefix, RoutingStrategy strategy = RoutingStrategy.Wildcard) Parameters Type Name Description System.String urlPrefix The URL prefix. RoutingStrategy strategy The strategy. | Improve this Doc View Source WebServer(String[]) Initializes a new instance of the WebServer class. This constructor does not provide any Logging capabilities. Declaration public WebServer(string[] urlPrefixes) Parameters Type Name Description System.String [] urlPrefixes The URL prefixes. | Improve this Doc View Source WebServer(String[], RoutingStrategy) Initializes a new instance of the WebServer class. NOTE: urlPrefix must be specified as something similar to: http://localhost:9696/ Please notice the ending slash. -- It is important Declaration public WebServer(string[] urlPrefixes, RoutingStrategy routingStrategy) Parameters Type Name Description System.String [] urlPrefixes The URL prefix. RoutingStrategy routingStrategy The routing strategy Properties | Improve this Doc View Source Listener Gets the underlying HTTP listener. Declaration public HttpListener Listener { get; protected set; } Property Value Type Description HttpListener The listener. | Improve this Doc View Source Modules Gets a list of registered modules Declaration public ReadOnlyCollection<IWebModule> Modules { get; } Property Value Type Description ReadOnlyCollection < IWebModule > The modules. | Improve this Doc View Source RoutingStrategy Gets the URL RoutingStrategy used in this instance. By default it is set to Wildcard, but Regex is the recommended value. Declaration public RoutingStrategy RoutingStrategy { get; protected set; } Property Value Type Description RoutingStrategy | Improve this Doc View Source SessionModule Gets registered the ISessionModule. Declaration public ISessionWebModule SessionModule { get; protected set; } Property Value Type Description ISessionWebModule The session module. | Improve this Doc View Source UrlPrefixes Gets the Url Prefix for which the server is serving requests. Declaration public HttpListenerPrefixCollection UrlPrefixes { get; } Property Value Type Description HttpListenerPrefixCollection The URL prefix. Methods | Improve this Doc View Source Create(String) Static method to create webserver instance Declaration public static WebServer Create(string urlPrefix) Parameters Type Name Description System.String urlPrefix The URL prefix. Returns Type Description WebServer The webserver instance. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source Module<T>() Gets the module registered for the given type. Returns null if no module matches the given type. Declaration public T Module<T>()where T : class, IWebModule Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ProcessRequest(HttpListenerContext) Process HttpListener Request and returns true if it was handled Declaration public bool ProcessRequest(HttpListenerContext context) Parameters Type Name Description HttpListenerContext context The HttpListenerContext Returns Type Description System.Boolean | Improve this Doc View Source RegisterModule(IWebModule) Registers an instance of a web module. Only 1 instance per type is allowed. Declaration public void RegisterModule(IWebModule module) Parameters Type Name Description IWebModule module The module. | Improve this Doc View Source RunAsync(CancellationToken, Middleware) Starts the listener and the registered modules Declaration public Task RunAsync(CancellationToken ct = null, Middleware app = null) Parameters Type Name Description CancellationToken ct Middleware app Returns Type Description Task Returns the task that the HTTP listener is running inside of, so that it can be waited upon after it's been canceled. | Improve this Doc View Source UnregisterModule(Type) Unregisters the module identified by its type. Declaration public void UnregisterModule(Type moduleType) Parameters Type Name Description Type moduleType Type of the module. Extension Methods Extensions.DeleteSession(WebServer, HttpListenerContext) Extensions.DeleteSession(WebServer, SessionInfo) Extensions.GetSession(WebServer, HttpListenerContext) Extensions.GetSession(WebServer, WebSocketContext) Extensions.WithStaticFolderAt(WebServer, String, String) Extensions.WithVirtualPaths(WebServer, Dictionary<String, String>, String) Extensions.WithLocalSession(WebServer) Extensions.WithWebApi(WebServer, Assembly) Extensions.WithWebSocket(WebServer, Assembly) Extensions.LoadApiControllers(WebServer, Assembly) Extensions.LoadWebSockets(WebServer, Assembly) Extensions.EnableCors(WebServer, String, String, String) Extensions.WithWebApiController<T>(WebServer)"
  },
  "api/Unosquare.Labs.EmbedIO.html": {
    "href": "api/Unosquare.Labs.EmbedIO.html",
    "title": "Namespace Unosquare.Labs.EmbedIO | Unosquare EmbedIO",
    "keywords": "Namespace Unosquare.Labs.EmbedIO Classes Constants Defines assembly-wide constants Extensions Extension methods to help your coding! Map Represents a binding of path and verb to a given method call (delegate) Middleware Represents a Middleware abstract class MiddlewareContext Represents the Middleware's context ModuleMap Represents a list which binds Paths and their corresponding HTTP Verbs to Method calls SessionInfo Represents the contents of an HTTP Session WebModuleBase Base class to define custom web modules inherit from this class and use the AddHandler Method to register your method calls WebServer Represents our tiny web server used to handle requests Interfaces ISessionWebModule Interface to create session modules IWebModule Interface to create web modules Enums CompressionMethod Specifies the compression method used to compress a message on the WebSocket connection. HttpVerbs Enumerates the different HTTP Verbs RoutingStrategy Defines the routing strategy for URL matching This is especially useful for REST service implementations in the WebApi module. Delegates AsyncResponseHandler An async delegate that handles certain action in a module given a path and a verb ResponseHandler A delegate that handles certain action in a module given a path and a verb"
  },
  "api/Unosquare.Net.AsyncResult.html": {
    "href": "api/Unosquare.Net.AsyncResult.html",
    "title": "Class AsyncResult | Unosquare EmbedIO",
    "keywords": "Class AsyncResult Represents an asynchronous operation result. Inheritance System.Object AsyncResult Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class AsyncResult : IAsyncResult Constructors | Improve this Doc View Source AsyncResult(Object) Initializes a new instance of the AsyncResult class. Declaration public AsyncResult(object state) Parameters Type Name Description System.Object state The state. Properties | Improve this Doc View Source AsyncState Gets a user-defined object that qualifies or contains information about an asynchronous operation. Declaration public object AsyncState { get; } Property Value Type Description System.Object | Improve this Doc View Source AsyncWaitHandle Gets a System.Threading.WaitHandle that is used to wait for an asynchronous operation to complete. Declaration public WaitHandle AsyncWaitHandle { get; } Property Value Type Description WaitHandle | Improve this Doc View Source CompletedSynchronously Gets a value that indicates whether the asynchronous operation completed synchronously. Declaration public bool CompletedSynchronously { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Data Gets the associated data of this async result. Declaration public object Data { get; } Property Value Type Description System.Object The data. | Improve this Doc View Source IsCompleted Gets a value that indicates whether the asynchronous operation has completed. Declaration public bool IsCompleted { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Complete(Object) Completes the specified result synchronously. Declaration public void Complete(object data) Parameters Type Name Description System.Object data The data."
  },
  "api/Unosquare.Net.CloseEventArgs.html": {
    "href": "api/Unosquare.Net.CloseEventArgs.html",
    "title": "Class CloseEventArgs | Unosquare EmbedIO",
    "keywords": "Class CloseEventArgs Represents the event data for the OnClose event. Inheritance System.Object CloseEventArgs Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class CloseEventArgs : EventArgs Remarks That event occurs when the WebSocket connection has been closed. If you would like to get the reason for the close, you should access the Code or Reason property. Properties | Improve this Doc View Source Code Gets the status code for the close. Declaration public ushort Code { get; } Property Value Type Description System.UInt16 A that represents the status code for the close if any. | Improve this Doc View Source Reason Gets the reason for the close. Declaration public string Reason { get; } Property Value Type Description System.String A that represents the reason for the close if any. | Improve this Doc View Source WasClean Gets a value indicating whether the connection has been closed cleanly. Declaration public bool WasClean { get; } Property Value Type Description System.Boolean true if the connection has been closed cleanly; otherwise, false ."
  },
  "api/Unosquare.Net.HttpListener.ExtendedProtectionSelector.html": {
    "href": "api/Unosquare.Net.HttpListener.ExtendedProtectionSelector.html",
    "title": "Delegate HttpListener.ExtendedProtectionSelector | Unosquare EmbedIO",
    "keywords": "Delegate HttpListener.ExtendedProtectionSelector The EPP selector delegate for the supplied request Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public delegate ExtendedProtectionPolicy ExtendedProtectionSelector(HttpListenerRequest request); Parameters Type Name Description HttpListenerRequest request The request. Returns Type Description ExtendedProtectionPolicy"
  },
  "api/Unosquare.Net.HttpListener.html": {
    "href": "api/Unosquare.Net.HttpListener.html",
    "title": "Class HttpListener | Unosquare EmbedIO",
    "keywords": "Class HttpListener The MONO implementation of the standard Http Listener class Inheritance System.Object HttpListener Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public sealed class HttpListener : IDisposable Constructors | Improve this Doc View Source HttpListener() Initializes a new instance of the HttpListener class. Declaration public HttpListener() Properties | Improve this Doc View Source IgnoreWriteExceptions Gets or sets a value indicating whether the listener should ignore write exceptions. Declaration public bool IgnoreWriteExceptions { get; set; } Property Value Type Description System.Boolean true if [ignore write exceptions]; otherwise, false . | Improve this Doc View Source IsListening Gets a value indicating whether this instance is listening. Declaration public bool IsListening { get; } Property Value Type Description System.Boolean true if this instance is listening; otherwise, false . | Improve this Doc View Source IsSupported Gets a value indicating whether this instance is supported. Declaration public static bool IsSupported { get; } Property Value Type Description System.Boolean true if this instance is supported; otherwise, false . | Improve this Doc View Source Prefixes Gets the prefixes. Declaration public HttpListenerPrefixCollection Prefixes { get; } Property Value Type Description HttpListenerPrefixCollection The prefixes. | Improve this Doc View Source Realm Gets or sets the realm. Declaration public string Realm { get; set; } Property Value Type Description System.String The realm. | Improve this Doc View Source UnsafeConnectionNtlmAuthentication Gets or sets a value indicating whether [unsafe connection NTLM authentication]. Declaration public bool UnsafeConnectionNtlmAuthentication { get; set; } Property Value Type Description System.Boolean true if [unsafe connection NTLM authentication]; otherwise, false . Methods | Improve this Doc View Source Abort() Aborts this listener. Declaration public void Abort() | Improve this Doc View Source BeginGetContext(AsyncCallback, Object) Begins the asynchronous operation of retrieving an HTTP conext Declaration public IAsyncResult BeginGetContext(AsyncCallback callback, object state) Parameters Type Name Description AsyncCallback callback The callback. System.Object state The state. Returns Type Description IAsyncResult | Improve this Doc View Source Close() Closes this listener. Declaration public void Close() | Improve this Doc View Source EndGetContext(IAsyncResult) Ends the asynchronous operation of retrieving an HTTP conext Declaration public HttpListenerContext EndGetContext(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The asynchronous result. Returns Type Description HttpListenerContext | Improve this Doc View Source GetContext() Gets the HTTP Listener's conext Declaration public HttpListenerContext GetContext() Returns Type Description HttpListenerContext | Improve this Doc View Source GetContextAsync() Gets the HTTP context asynchronously. Declaration public Task<HttpListenerContext> GetContextAsync() Returns Type Description Task < HttpListenerContext > | Improve this Doc View Source Start() Starts this listener. Declaration public void Start() | Improve this Doc View Source Stop() Stops this listener. Declaration public void Stop()"
  },
  "api/Unosquare.Net.HttpListenerPrefixCollection.html": {
    "href": "api/Unosquare.Net.HttpListenerPrefixCollection.html",
    "title": "Class HttpListenerPrefixCollection | Unosquare EmbedIO",
    "keywords": "Class HttpListenerPrefixCollection Represents a collection of HTTP listener profixes Inheritance System.Object HttpListenerPrefixCollection Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class HttpListenerPrefixCollection : ICollection<string> Properties | Improve this Doc View Source Count Gets the number of elements contained in the System.Collections.Generic.ICollection`1 . Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection`1 is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSynchronized Gets a value indicating whether this instance is synchronized. Declaration public bool IsSynchronized { get; } Property Value Type Description System.Boolean true if this instance is synchronized; otherwise, false . Methods | Improve this Doc View Source Add(String) Adds the specified URI prefix. Declaration public void Add(string uriPrefix) Parameters Type Name Description System.String uriPrefix The URI prefix. | Improve this Doc View Source Clear() Removes all items from the System.Collections.Generic.ICollection`1 . Declaration public void Clear() | Improve this Doc View Source Contains(String) Determines whether [contains] [the specified URI prefix]. Declaration public bool Contains(string uriPrefix) Parameters Type Name Description System.String uriPrefix The URI prefix. Returns Type Description System.Boolean true if [contains] [the specified URI prefix]; otherwise, false . | Improve this Doc View Source CopyTo(Array, Int32) Copies the prefixes to the specified string Declaration public void CopyTo(Array array, int offset) Parameters Type Name Description Array array The array. System.Int32 offset The offset. | Improve this Doc View Source CopyTo(String[], Int32) Copies the prefixes to the specified string array Declaration public void CopyTo(string[] array, int offset) Parameters Type Name Description System.String [] array The array. System.Int32 offset The offset. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<string> GetEnumerator() Returns Type Description IEnumerator < System.String > An enumerator that can be used to iterate through the collection. | Improve this Doc View Source Remove(String) Removes the specified URI prefix. Declaration public bool Remove(string uriPrefix) Parameters Type Name Description System.String uriPrefix The URI prefix. Returns Type Description System.Boolean"
  },
  "api/Unosquare.Net.HttpListenerRequest.html": {
    "href": "api/Unosquare.Net.HttpListenerRequest.html",
    "title": "Class HttpListenerRequest | Unosquare EmbedIO",
    "keywords": "Class HttpListenerRequest Represents an HTTP Listener's request Inheritance System.Object HttpListenerRequest Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public sealed class HttpListenerRequest : object Properties | Improve this Doc View Source AcceptTypes Gets the MIME accept types. Declaration public string[] AcceptTypes { get; } Property Value Type Description System.String [] The accept types. | Improve this Doc View Source ContentEncoding Gets the content encoding. Declaration public Encoding ContentEncoding { get; } Property Value Type Description Encoding The content encoding. | Improve this Doc View Source ContentLength64 Gets the content length in a 64-bit integer Declaration public long ContentLength64 { get; } Property Value Type Description System.Int64 The content length64. | Improve this Doc View Source ContentType Gets the MIME type of the content. Declaration public string ContentType { get; } Property Value Type Description System.String The type of the content. | Improve this Doc View Source Cookies Gets the cookies collection. Declaration public CookieCollection Cookies { get; } Property Value Type Description CookieCollection The cookies. | Improve this Doc View Source HasEntityBody Gets a value indicating whether this instance has entity body. Declaration public bool HasEntityBody { get; } Property Value Type Description System.Boolean true if this instance has entity body; otherwise, false . | Improve this Doc View Source Headers Gets the request headers. Declaration public NameValueCollection Headers { get; } Property Value Type Description NameValueCollection The headers. | Improve this Doc View Source HttpMethod Gets the HTTP method. Declaration public string HttpMethod { get; } Property Value Type Description System.String The HTTP method. | Improve this Doc View Source InputStream Gets the input stream. Declaration public Stream InputStream { get; } Property Value Type Description Stream The input stream. | Improve this Doc View Source IsAuthenticated Gets a value indicating whether this request is authenticated. Declaration public bool IsAuthenticated { get; } Property Value Type Description System.Boolean true if this instance is authenticated; otherwise, false . | Improve this Doc View Source IsLocal Gets a value indicating whether this request is local. Declaration public bool IsLocal { get; } Property Value Type Description System.Boolean true if this instance is local; otherwise, false . | Improve this Doc View Source IsSecureConnection Gets a value indicating whether this request is under a secure connection. Declaration public bool IsSecureConnection { get; } Property Value Type Description System.Boolean true if this instance is secure connection; otherwise, false . | Improve this Doc View Source IsWebSocketRequest Gets a value indicating whether this request is a web socket request. Declaration public bool IsWebSocketRequest { get; } Property Value Type Description System.Boolean true if this instance is web socket request; otherwise, false . | Improve this Doc View Source KeepAlive Gets the Keep-Alive value for this request Declaration public bool KeepAlive { get; } Property Value Type Description System.Boolean true if [keep alive]; otherwise, false . | Improve this Doc View Source LocalEndPoint Gets the local end point. Declaration public IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint The local end point. | Improve this Doc View Source ProtocolVersion Gets the protocol version. Declaration public Version ProtocolVersion { get; } Property Value Type Description Version The protocol version. | Improve this Doc View Source QueryString Gets the query string. Declaration public NameValueCollection QueryString { get; } Property Value Type Description NameValueCollection The query string. | Improve this Doc View Source RawUrl Gets the raw URL. Declaration public string RawUrl { get; } Property Value Type Description System.String The raw URL. | Improve this Doc View Source RemoteEndPoint Gets the remote end point. Declaration public IPEndPoint RemoteEndPoint { get; } Property Value Type Description IPEndPoint The remote end point. | Improve this Doc View Source RequestTraceIdentifier Gets the request trace identifier. Declaration public Guid RequestTraceIdentifier { get; } Property Value Type Description Guid The request trace identifier. | Improve this Doc View Source ServiceName Gets the name of the service. Declaration public string ServiceName { get; } Property Value Type Description System.String The name of the service. | Improve this Doc View Source TransportContext Gets the transport context. Declaration public TransportContext TransportContext { get; } Property Value Type Description TransportContext The transport context. | Improve this Doc View Source Url Gets the URL. Declaration public Uri Url { get; } Property Value Type Description Uri The URL. | Improve this Doc View Source UrlReferrer Gets the URL referrer. Declaration public Uri UrlReferrer { get; } Property Value Type Description Uri The URL referrer. | Improve this Doc View Source UserAgent Gets the user agent. Declaration public string UserAgent { get; } Property Value Type Description System.String The user agent. | Improve this Doc View Source UserHostAddress Gets the user host address. Declaration public string UserHostAddress { get; } Property Value Type Description System.String The user host address. | Improve this Doc View Source UserHostName Gets the name of the user host. Declaration public string UserHostName { get; } Property Value Type Description System.String The name of the user host. | Improve this Doc View Source UserLanguages Gets the user languages. Declaration public string[] UserLanguages { get; } Property Value Type Description System.String [] The user languages."
  },
  "api/Unosquare.Net.HttpListenerResponse.html": {
    "href": "api/Unosquare.Net.HttpListenerResponse.html",
    "title": "Class HttpListenerResponse | Unosquare EmbedIO",
    "keywords": "Class HttpListenerResponse Represents an HTTP Listener's response Inheritance System.Object HttpListenerResponse Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public sealed class HttpListenerResponse : IDisposable Properties | Improve this Doc View Source ContentEncoding Gets or sets the content encoding. Declaration public Encoding ContentEncoding { get; set; } Property Value Type Description Encoding The content encoding. | Improve this Doc View Source ContentLength64 Gets or sets the content length. Declaration public long ContentLength64 { get; set; } Property Value Type Description System.Int64 The content length64. | Improve this Doc View Source ContentType Gets or sets the MIME type of the content. Declaration public string ContentType { get; set; } Property Value Type Description System.String The type of the content. | Improve this Doc View Source Cookies Gets or sets the cookies collection. Declaration public CookieCollection Cookies { get; set; } Property Value Type Description CookieCollection The cookies. | Improve this Doc View Source Headers Gets or sets the headers. Declaration public WebHeaderCollection Headers { get; set; } Property Value Type Description WebHeaderCollection The headers. | Improve this Doc View Source KeepAlive Gets or sets the Keep-Alive value. Declaration public bool KeepAlive { get; set; } Property Value Type Description System.Boolean true if [keep alive]; otherwise, false . | Improve this Doc View Source OutputStream Gets the output stream. Declaration public ResponseStream OutputStream { get; } Property Value Type Description ResponseStream The output stream. | Improve this Doc View Source ProtocolVersion Gets or sets the protocol version. Declaration public Version ProtocolVersion { get; set; } Property Value Type Description Version The protocol version. | Improve this Doc View Source RedirectLocation Gets or sets the redirect location. Declaration public string RedirectLocation { get; set; } Property Value Type Description System.String The redirect location. | Improve this Doc View Source SendChunked Gets or sets a value indicating whether [send chunked]. Declaration public bool SendChunked { get; set; } Property Value Type Description System.Boolean true if [send chunked]; otherwise, false . | Improve this Doc View Source StatusCode Gets or sets the status code. Declaration public int StatusCode { get; set; } Property Value Type Description System.Int32 The status code. | Improve this Doc View Source StatusDescription Gets or sets the status description. Declaration public string StatusDescription { get; set; } Property Value Type Description System.String The status description. Methods | Improve this Doc View Source Abort() Aborts this instance. Declaration public void Abort() | Improve this Doc View Source AddHeader(String, String) Adds the header. Declaration public void AddHeader(string name, string value) Parameters Type Name Description System.String name The name. System.String value The value. | Improve this Doc View Source AppendCookie(System.Net.Cookie) Appends the cookie. Declaration public void AppendCookie(System.Net.Cookie cookie) Parameters Type Name Description System.Net.Cookie cookie The cookie. | Improve this Doc View Source AppendHeader(String, String) Appends the header. Declaration public void AppendHeader(string name, string value) Parameters Type Name Description System.String name The name. System.String value The value. | Improve this Doc View Source Close() Closes this instance. Declaration public void Close() | Improve this Doc View Source Close(Byte[], Boolean) Closes the specified response entity. Declaration public void Close(byte[] responseEntity, bool willBlock) Parameters Type Name Description System.Byte [] responseEntity The response entity. System.Boolean willBlock if set to true [will block]. | Improve this Doc View Source CopyFrom(HttpListenerResponse) Copies from. Declaration public void CopyFrom(HttpListenerResponse templateResponse) Parameters Type Name Description HttpListenerResponse templateResponse The template response. | Improve this Doc View Source Redirect(String) Redirects the specified URL. Declaration public void Redirect(string url) Parameters Type Name Description System.String url The URL. | Improve this Doc View Source SetCookie(System.Net.Cookie) Sets the cookie. Declaration public void SetCookie(System.Net.Cookie cookie) Parameters Type Name Description System.Net.Cookie cookie The cookie."
  },
  "api/Unosquare.Net.HttpVersion.html": {
    "href": "api/Unosquare.Net.HttpVersion.html",
    "title": "Class HttpVersion | Unosquare EmbedIO",
    "keywords": "Class HttpVersion Inheritance System.Object HttpVersion Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class HttpVersion : object Fields | Improve this Doc View Source Version10 Declaration public static readonly Version Version10 Field Value Type Description Version | Improve this Doc View Source Version11 Declaration public static readonly Version Version11 Field Value Type Description Version"
  },
  "api/Unosquare.Net.WebSocket.html": {
    "href": "api/Unosquare.Net.WebSocket.html",
    "title": "Class WebSocket | Unosquare EmbedIO",
    "keywords": "Class WebSocket Implements the WebSocket interface. Inheritance System.Object WebSocket Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class WebSocket : IDisposable Remarks The WebSocket class provides a set of methods and properties for two-way communication using the WebSocket protocol ( RFC 6455 ). Constructors | Improve this Doc View Source WebSocket(String, String[]) Initializes a new instance of the WebSocket class with the specified WebSocket URL and subprotocols. Declaration public WebSocket(string url, params string[] protocols) Parameters Type Name Description System.String url A that represents the WebSocket URL to connect. System.String [] protocols An array of that contains the WebSocket subprotocols if any. Each value of protocols must be a token defined in RFC 2616 . Properties | Improve this Doc View Source Compression Gets or sets the compression method used to compress a message on the WebSocket connection. Declaration public CompressionMethod Compression { get; set; } Property Value Type Description CompressionMethod One of the CompressionMethod enum values, specifies the compression method used to compress a message. The default value is None . | Improve this Doc View Source Cookies Gets the HTTP cookies included in the WebSocket handshake request and response. Declaration public IEnumerable<Cookie> Cookies { get; } Property Value Type Description IEnumerable < Cookie > An System.Collections.Generic.IEnumerable{WebSocketSharp.Net.Cookie} instance that provides an enumerator which supports the iteration over the collection of the cookies. | Improve this Doc View Source EmitOnPing Gets or sets a value indicating whether the WebSocket emits a OnMessage event when receives a ping. Declaration public bool EmitOnPing { get; set; } Property Value Type Description System.Boolean true if the WebSocket emits a OnMessage event when receives a ping; otherwise, false . The default value is false . | Improve this Doc View Source EnableRedirection Gets or sets a value indicating whether the WebSocket redirects the handshake request to the new URL located in the handshake response. Declaration public bool EnableRedirection { get; set; } Property Value Type Description System.Boolean true if the WebSocket redirects the handshake request to the new URL; otherwise, false . The default value is false . | Improve this Doc View Source Extensions Gets the WebSocket extensions selected by the server. Declaration public string Extensions { get; } Property Value Type Description System.String A that represents the extensions if any. The default value is . | Improve this Doc View Source IsAlive Gets a value indicating whether the WebSocket connection is alive. Declaration public bool IsAlive { get; } Property Value Type Description System.Boolean true if the connection is alive; otherwise, false . | Improve this Doc View Source IsSecure Gets a value indicating whether the WebSocket connection is secure. Declaration public bool IsSecure { get; } Property Value Type Description System.Boolean true if the connection is secure; otherwise, false . | Improve this Doc View Source Origin Gets or sets the value of the HTTP Origin header to send with the WebSocket handshake request to the server. Declaration public string Origin { get; set; } Property Value Type Description System.String A that represents the value of the Origin header to send. The default value is null . The Origin header has the following syntax: <scheme>://<host>[:<port>] Remarks The WebSocket sends the Origin header if this property has any. | Improve this Doc View Source Protocol Gets the WebSocket subprotocol selected by the server. Declaration public string Protocol { get; } Property Value Type Description System.String A that represents the subprotocol if any. The default value is . | Improve this Doc View Source State Gets the state of the WebSocket connection. Declaration public WebSocketState State { get; } Property Value Type Description WebSocketState One of the WebSocketState enum values, indicates the state of the connection. The default value is Connecting . | Improve this Doc View Source Url Gets the WebSocket URL used to connect, or accepted. Declaration public Uri Url { get; } Property Value Type Description Uri A that represents the URL used to connect, or accepted. | Improve this Doc View Source WaitTime Gets or sets the wait time for the response to the Ping or Close. Declaration public TimeSpan WaitTime { get; set; } Property Value Type Description TimeSpan A that represents the wait time. The default value is the same as 5 seconds, or 1 second if the WebSocket is used in a server. Methods | Improve this Doc View Source Accept() Accepts the WebSocket handshake request. Declaration public void Accept() Remarks This method isn't available in a client. | Improve this Doc View Source AcceptAsync() Accepts the WebSocket handshake request asynchronously. Declaration public void AcceptAsync() Remarks This method doesn't wait for the accept to be complete. This method isn't available in a client. | Improve this Doc View Source Close() Closes the WebSocket connection, and releases all associated resources. Declaration public void Close() | Improve this Doc View Source Close(CloseStatusCode) Closes the WebSocket connection with the specified code , and releases all associated resources. Declaration public void Close(CloseStatusCode code) Parameters Type Name Description CloseStatusCode code One of the CloseStatusCode enum values that represents the status code indicating the reason for the close. | Improve this Doc View Source Close(CloseStatusCode, String) Closes the WebSocket connection with the specified code and reason , and releases all associated resources. Declaration public void Close(CloseStatusCode code, string reason) Parameters Type Name Description CloseStatusCode code One of the CloseStatusCode enum values that represents the status code indicating the reason for the close. System.String reason A that represents the reason for the close. The size must be 123 bytes or less. | Improve this Doc View Source CloseAsync() Closes the WebSocket connection asynchronously, and releases all associated resources. Declaration public void CloseAsync() Remarks This method does not wait for the close to be complete. | Improve this Doc View Source CloseAsync(CloseStatusCode) Closes the WebSocket connection asynchronously with the specified code , and releases all associated resources. Declaration public void CloseAsync(CloseStatusCode code) Parameters Type Name Description CloseStatusCode code One of the CloseStatusCode enum values that represents the status code indicating the reason for the close. Remarks This method does not wait for the close to be complete. | Improve this Doc View Source CloseAsync(CloseStatusCode, String) Closes the WebSocket connection asynchronously with the specified code and reason , and releases all associated resources. Declaration public void CloseAsync(CloseStatusCode code, string reason) Parameters Type Name Description CloseStatusCode code One of the CloseStatusCode enum values that represents the status code indicating the reason for the close. System.String reason A that represents the reason for the close. The size must be 123 bytes or less. Remarks This method does not wait for the close to be complete. | Improve this Doc View Source Connect() Establishes a WebSocket connection. Declaration public void Connect() Remarks This method isn't available in a server. | Improve this Doc View Source ConnectAsync() Establishes a WebSocket connection asynchronously. Declaration public void ConnectAsync() Remarks This method doesn't wait for the connect to be complete. This method isn't available in a server. | Improve this Doc View Source Ping() Sends a ping using the WebSocket connection. Declaration public bool Ping() Returns Type Description System.Boolean true if the WebSocket receives a pong to this ping in a time; otherwise, false . | Improve this Doc View Source Ping(String) Sends a ping with the specified message using the WebSocket connection. Declaration public bool Ping(string message) Parameters Type Name Description System.String message A that represents the message to send. Returns Type Description System.Boolean true if the WebSocket receives a pong to this ping in a time; otherwise, false . | Improve this Doc View Source Send(FileInfo) Sends the specified file as binary data using the WebSocket connection. Declaration public void Send(FileInfo file) Parameters Type Name Description FileInfo file A that represents the file to send. | Improve this Doc View Source Send(Byte[]) Sends binary data using the WebSocket connection. Declaration public void Send(byte[] data) Parameters Type Name Description System.Byte [] data An array of that represents the binary data to send. | Improve this Doc View Source Send(String) Sends text data using the WebSocket connection. Declaration public void Send(string data) Parameters Type Name Description System.String data A that represents the text data to send. | Improve this Doc View Source SendAsync(FileInfo, Action<Boolean>) Sends the specified file as binary data asynchronously using the WebSocket connection. Declaration public void SendAsync(FileInfo file, Action<bool> completed) Parameters Type Name Description FileInfo file A that represents the file to send. Action < System.Boolean > completed An Action<bool> delegate that references the method(s) called when the send is complete. A passed to this delegate is true if the send is complete successfully. Remarks This method doesn't wait for the send to be complete. | Improve this Doc View Source SendAsync(Stream, Int32, Action<Boolean>) Sends binary data from the specified asynchronously using the WebSocket connection. Declaration public void SendAsync(Stream stream, int length, Action<bool> completed) Parameters Type Name Description Stream stream A from which contains the binary data to send. System.Int32 length An that represents the number of bytes to send. Action < System.Boolean > completed An Action<bool> delegate that references the method(s) called when the send is complete. A passed to this delegate is true if the send is complete successfully. Remarks This method doesn't wait for the send to be complete. | Improve this Doc View Source SendAsync(Byte[], Action<Boolean>) Sends binary data asynchronously using the WebSocket connection. Declaration public void SendAsync(byte[] data, Action<bool> completed) Parameters Type Name Description System.Byte [] data An array of that represents the binary data to send. Action < System.Boolean > completed An Action<bool> delegate that references the method(s) called when the send is complete. A passed to this delegate is true if the send is complete successfully. Remarks This method doesn't wait for the send to be complete. | Improve this Doc View Source SendAsync(String, Action<Boolean>) Sends text data asynchronously using the WebSocket connection. Declaration public void SendAsync(string data, Action<bool> completed) Parameters Type Name Description System.String data A that represents the text data to send. Action < System.Boolean > completed An Action<bool> delegate that references the method(s) called when the send is complete. A passed to this delegate is true if the send is complete successfully. Remarks This method doesn't wait for the send to be complete. | Improve this Doc View Source SetCookie(Cookie) Sets an HTTP cookie to send with the WebSocket handshake request to the server. Declaration public void SetCookie(Cookie cookie) Parameters Type Name Description Cookie cookie A that represents a cookie to send. Events | Improve this Doc View Source OnClose Occurs when the WebSocket connection has been closed. Declaration public event EventHandler<CloseEventArgs> OnClose Event Type Type Description EventHandler < CloseEventArgs > | Improve this Doc View Source OnError Occurs when the WebSocket gets an error. Declaration public event EventHandler<ConnectionFailureEventArgs> OnError Event Type Type Description EventHandler < ConnectionFailureEventArgs > | Improve this Doc View Source OnMessage Occurs when the WebSocket receives a message. Declaration public event EventHandler<MessageEventArgs> OnMessage Event Type Type Description EventHandler < MessageEventArgs > | Improve this Doc View Source OnOpen Occurs when the WebSocket connection has been established. Declaration public event EventHandler OnOpen Event Type Type Description EventHandler"
  },
  "api/Unosquare.Net.WebSocketContext.html": {
    "href": "api/Unosquare.Net.WebSocketContext.html",
    "title": "Class WebSocketContext | Unosquare EmbedIO",
    "keywords": "Class WebSocketContext Provides the properties used to access the information in a WebSocket handshake request received by the HttpListener . Inheritance System.Object WebSocketContext Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class WebSocketContext : object Properties | Improve this Doc View Source CookieCollection Gets the HTTP cookies included in the request. Declaration public CookieCollection CookieCollection { get; } Property Value Type Description CookieCollection A CookieCollection that contains the cookies. | Improve this Doc View Source Headers Gets the HTTP headers included in the request. Declaration public NameValueCollection Headers { get; } Property Value Type Description NameValueCollection A that contains the headers. | Improve this Doc View Source Host Gets the value of the Host header included in the request. Declaration public string Host { get; } Property Value Type Description System.String A that represents the value of the Host header. | Improve this Doc View Source IsAuthenticated Gets a value indicating whether the client is authenticated. Declaration public bool IsAuthenticated { get; } Property Value Type Description System.Boolean true if the client is authenticated; otherwise, false . | Improve this Doc View Source IsLocal Gets a value indicating whether the client connected from the local computer. Declaration public bool IsLocal { get; } Property Value Type Description System.Boolean true if the client connected from the local computer; otherwise, false . | Improve this Doc View Source IsSecureConnection Gets a value indicating whether the WebSocket connection is secured. Declaration public bool IsSecureConnection { get; } Property Value Type Description System.Boolean true if the connection is secured; otherwise, false . | Improve this Doc View Source IsWebSocketRequest Gets a value indicating whether the request is a WebSocket handshake request. Declaration public bool IsWebSocketRequest { get; } Property Value Type Description System.Boolean true if the request is a WebSocket handshake request; otherwise, false . | Improve this Doc View Source Origin Gets the value of the Origin header included in the request. Declaration public string Origin { get; } Property Value Type Description System.String A that represents the value of the Origin header. | Improve this Doc View Source QueryString Gets the query string included in the request. Declaration public NameValueCollection QueryString { get; } Property Value Type Description NameValueCollection A that contains the query string parameters. | Improve this Doc View Source RequestUri Gets the URI requested by the client. Declaration public Uri RequestUri { get; } Property Value Type Description Uri A that represents the requested URI. | Improve this Doc View Source SecWebSocketKey Gets the value of the Sec-WebSocket-Key header included in the request. Declaration public string SecWebSocketKey { get; } Property Value Type Description System.String A that represents the value of the Sec-WebSocket-Key header. Remarks This property provides a part of the information used by the server to prove that it received a valid WebSocket handshake request. | Improve this Doc View Source SecWebSocketProtocols Gets the values of the Sec-WebSocket-Protocol header included in the request. Declaration public IEnumerable<string> SecWebSocketProtocols { get; } Property Value Type Description IEnumerable < System.String > An System.Collections.Generic.IEnumerable{string} instance that provides an enumerator which supports the iteration over the values of the Sec-WebSocket-Protocol header. Remarks This property represents the subprotocols requested by the client. | Improve this Doc View Source SecWebSocketVersion Gets the value of the Sec-WebSocket-Version header included in the request. Declaration public string SecWebSocketVersion { get; } Property Value Type Description System.String A that represents the value of the Sec-WebSocket-Version header. Remarks This property represents the WebSocket protocol version. | Improve this Doc View Source ServerEndPoint Gets the server endpoint as an IP address and a port number. Declaration public System.Net.IPEndPoint ServerEndPoint { get; } Property Value Type Description System.Net.IPEndPoint A that represents the server endpoint. | Improve this Doc View Source User Gets the client information (identity, authentication, and security roles). Declaration public IPrincipal User { get; } Property Value Type Description IPrincipal A instance that represents the client information. | Improve this Doc View Source UserEndPoint Gets the client endpoint as an IP address and a port number. Declaration public System.Net.IPEndPoint UserEndPoint { get; } Property Value Type Description System.Net.IPEndPoint A that represents the client endpoint. | Improve this Doc View Source WebSocket Gets the WebSocket instance used for two-way communication between client and server. Declaration public WebSocket WebSocket { get; } Property Value Type Description WebSocket A WebSocket . Methods | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description System.String A that represents this instance. Extension Methods Extensions.GetSession(WebSocketContext, WebServer)"
  },
  "api/Unosquare.Net.WebSocketException.html": {
    "href": "api/Unosquare.Net.WebSocketException.html",
    "title": "Class WebSocketException | Unosquare EmbedIO",
    "keywords": "Class WebSocketException The exception that is thrown when a WebSocket gets a fatal error. Inheritance System.Object WebSocketException Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class WebSocketException : Exception Properties | Improve this Doc View Source Code Gets the status code indicating the cause of the exception. Declaration public CloseStatusCode Code { get; } Property Value Type Description CloseStatusCode One of the CloseStatusCode enum values, represents the status code indicating the cause of the exception."
  },
  "api/Unosquare.Net.WebSocketMessageType.html": {
    "href": "api/Unosquare.Net.WebSocketMessageType.html",
    "title": "Enum WebSocketMessageType | Unosquare EmbedIO",
    "keywords": "Enum WebSocketMessageType Enums WS Message Type Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public enum WebSocketMessageType : int Fields Name Description Binary The binary Close The close Text The text"
  },
  "api/Unosquare.Labs.EmbedIO.Extensions.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Extensions.html",
    "title": "Class Extensions | Unosquare EmbedIO",
    "keywords": "Class Extensions Extension methods to help your coding! Inheritance System.Object Extensions Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public static class Extensions : object Methods | Improve this Doc View Source Compress(Stream, CompressionMethod, CompressionMode) Compresses the specified buffer stream using the G-Zip compression algorithm. Declaration public static MemoryStream Compress(this Stream buffer, CompressionMethod method = CompressionMethod.Gzip, CompressionMode mode = null) Parameters Type Name Description Stream buffer The buffer. CompressionMethod method The method. CompressionMode mode The mode. Returns Type Description MemoryStream | Improve this Doc View Source Compress(Byte[], CompressionMethod, CompressionMode) Compresses/Decompresses the specified buffer using the compression algorithm. Declaration public static byte[] Compress(this byte[] buffer, CompressionMethod method = CompressionMethod.Gzip, CompressionMode mode = null) Parameters Type Name Description System.Byte [] buffer The buffer. CompressionMethod method The method. CompressionMode mode The mode. Returns Type Description System.Byte [] | Improve this Doc View Source DeleteSession(WebServer, SessionInfo) Deletes the given session object. Declaration public static void DeleteSession(this WebServer server, SessionInfo session) Parameters Type Name Description WebServer server The server. SessionInfo session The session info. | Improve this Doc View Source DeleteSession(WebServer, HttpListenerContext) Deletes the session object associated to the current context. Declaration public static void DeleteSession(this WebServer server, HttpListenerContext context) Parameters Type Name Description WebServer server The server. HttpListenerContext context The context. | Improve this Doc View Source DeleteSession(HttpListenerContext, WebServer) Deletes the session object associated to the current context. Declaration public static void DeleteSession(this HttpListenerContext context, WebServer server) Parameters Type Name Description HttpListenerContext context The context. WebServer server The server. | Improve this Doc View Source EnableCors(WebServer, String, String, String) Enables CORS in the WebServer Declaration public static WebServer EnableCors(this WebServer webserver, string origins = null, string headers = null, string methods = null) Parameters Type Name Description WebServer webserver The webserver instance. System.String origins The valid origins, default all System.String headers The valid headers, default all System.String methods The valid method, default all Returns Type Description WebServer | Improve this Doc View Source GetSession(WebServer, HttpListenerContext) Gets the session object associated to the current context. Returns null if the LocalSessionWebModule has not been loaded. Declaration public static SessionInfo GetSession(this WebServer server, HttpListenerContext context) Parameters Type Name Description WebServer server The server. HttpListenerContext context The context. Returns Type Description SessionInfo | Improve this Doc View Source GetSession(WebServer, WebSocketContext) Gets the session. Declaration public static SessionInfo GetSession(this WebServer server, WebSocketContext context) Parameters Type Name Description WebServer server The server. WebSocketContext context The context. Returns Type Description SessionInfo | Improve this Doc View Source GetSession(HttpListenerContext, WebServer) Gets the session object associated to the current context. Returns null if the LocalSessionWebModule has not been loaded. Declaration public static SessionInfo GetSession(this HttpListenerContext context, WebServer server) Parameters Type Name Description HttpListenerContext context The context. WebServer server The server. Returns Type Description SessionInfo | Improve this Doc View Source GetSession(WebSocketContext, WebServer) Gets the session object associated to the current context. Returns null if the LocalSessionWebModule has not been loaded. Declaration public static SessionInfo GetSession(this WebSocketContext context, WebServer server) Parameters Type Name Description WebSocketContext context The context. WebServer server The server. Returns Type Description SessionInfo | Improve this Doc View Source HasRequestHeader(HttpListenerContext, String) Determines whether [has request header] [the specified context]. Declaration public static bool HasRequestHeader(this HttpListenerContext context, string headerName) Parameters Type Name Description HttpListenerContext context The context. System.String headerName Name of the header. Returns Type Description System.Boolean | Improve this Doc View Source InQueryString(HttpListenerContext, String) Determines if a key exists within the Request's query string Declaration public static bool InQueryString(this HttpListenerContext context, string key) Parameters Type Name Description HttpListenerContext context The context. System.String key The key. Returns Type Description System.Boolean | Improve this Doc View Source JsonResponse(HttpListenerContext, Object) Outputs a Json Response given a data object Declaration public static bool JsonResponse(this HttpListenerContext context, object data) Parameters Type Name Description HttpListenerContext context The context. System.Object data The data. Returns Type Description System.Boolean | Improve this Doc View Source JsonResponse(HttpListenerContext, String) Outputs a Json Response given a Json string Declaration public static bool JsonResponse(this HttpListenerContext context, string json) Parameters Type Name Description HttpListenerContext context The context. System.String json The json. Returns Type Description System.Boolean | Improve this Doc View Source LoadApiControllers(WebApiModule, Assembly) Load all the WebApi Controllers in an assembly Declaration public static WebApiModule LoadApiControllers(this WebApiModule apiModule, Assembly assembly = null) Parameters Type Name Description WebApiModule apiModule The apíModule instance. Assembly assembly The assembly to load WebApi Controllers from. Leave null to load from the currently executing assembly. Returns Type Description WebApiModule The webserver instance. | Improve this Doc View Source LoadApiControllers(WebServer, Assembly) Load all the WebApi Controllers in an assembly Declaration public static WebServer LoadApiControllers(this WebServer webserver, Assembly assembly = null) Parameters Type Name Description WebServer webserver The webserver instance. Assembly assembly The assembly to load WebApi Controllers from. Leave null to load from the currently executing assembly. Returns Type Description WebServer The webserver instance. | Improve this Doc View Source LoadWebSockets(WebServer, Assembly) Load all the WebSockets in an assembly Declaration public static WebServer LoadWebSockets(this WebServer webserver, Assembly assembly = null) Parameters Type Name Description WebServer webserver The webserver instance. Assembly assembly The assembly to load WebSocketsServer types from. Leave null to load from the currently executing assembly. Returns Type Description WebServer The webserver instance. | Improve this Doc View Source NoCache(HttpListenerContext) Sends headers to disable caching on the client side. Declaration public static void NoCache(this HttpListenerContext context) Parameters Type Name Description HttpListenerContext context The context. | Improve this Doc View Source ParseJson<T>(String) Parses the json as a given type from the request body string. Declaration public static T ParseJson<T>(this string requestBody)where T : class Parameters Type Name Description System.String requestBody The request body. Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ParseJson<T>(HttpListenerContext) Parses the json as a given type from the request body. Please note the underlying input stream is not rewindable. Declaration public static T ParseJson<T>(this HttpListenerContext context)where T : class Parameters Type Name Description HttpListenerContext context The context. Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source QueryString(HttpListenerContext, String) Gets the value for the specified query string key. If the value does not exist it returns null. Declaration public static string QueryString(this HttpListenerContext context, string key) Parameters Type Name Description HttpListenerContext context The context. System.String key The key. Returns Type Description System.String | Improve this Doc View Source Redirect(HttpListenerContext, String, Boolean) Sets a response static code of 302 and adds a Location header to the response in order to direct the client to a different URL Declaration public static void Redirect(this HttpListenerContext context, string location, bool useAbsoluteUrl) Parameters Type Name Description HttpListenerContext context The context. System.String location The location. System.Boolean useAbsoluteUrl if set to true [use absolute URL]. | Improve this Doc View Source RequestBody(HttpListenerContext) Retrieves the request body as a string. Note that once this method returns, the underlying input stream cannot be read again as it is not rewindable for obvious reasons. This functionality is by design. Declaration public static string RequestBody(this HttpListenerContext context) Parameters Type Name Description HttpListenerContext context The context. Returns Type Description System.String | Improve this Doc View Source RequestFormDataDictionary(String) Returns a dictionary of KVPs from Request data Declaration public static Dictionary<string, object> RequestFormDataDictionary(this string requestBody) Parameters Type Name Description System.String requestBody The request body. Returns Type Description Dictionary < System.String , System.Object > | Improve this Doc View Source RequestFormDataDictionary(HttpListenerContext) Returns dictionary from Request POST data Please note the underlying input stream is not rewindable. Declaration public static Dictionary<string, object> RequestFormDataDictionary(this HttpListenerContext context) Parameters Type Name Description HttpListenerContext context Returns Type Description Dictionary < System.String , System.Object > | Improve this Doc View Source RequestHeader(HttpListenerContext, String) Retrieves the specified request the header. Declaration public static string RequestHeader(this HttpListenerContext context, string headerName) Parameters Type Name Description HttpListenerContext context The context. System.String headerName Name of the header. Returns Type Description System.String | Improve this Doc View Source RequestPath(HttpListenerContext) Gets the request path for the specified context. Declaration public static string RequestPath(this HttpListenerContext context) Parameters Type Name Description HttpListenerContext context The context. Returns Type Description System.String | Improve this Doc View Source RequestPathCaseSensitive(HttpListenerContext) Gets the request path for the specified context case sensitive. Declaration public static string RequestPathCaseSensitive(this HttpListenerContext context) Parameters Type Name Description HttpListenerContext context The context. Returns Type Description System.String | Improve this Doc View Source RequestVerb(HttpListenerContext) Retrieves the Request HTTP Verb (also called Method) of this context. Declaration public static HttpVerbs RequestVerb(this HttpListenerContext context) Parameters Type Name Description HttpListenerContext context The context. Returns Type Description HttpVerbs | Improve this Doc View Source WithLocalSession(WebServer) Add StaticFilesModule to WebServer Declaration public static WebServer WithLocalSession(this WebServer webserver) Parameters Type Name Description WebServer webserver The webserver instance. Returns Type Description WebServer | Improve this Doc View Source WithStaticFolderAt(WebServer, String, String) Add the StaticFilesModule to the specified WebServer Declaration public static WebServer WithStaticFolderAt(this WebServer webserver, string rootPath, string defaultDocument = null) Parameters Type Name Description WebServer webserver The webserver instance. System.String rootPath The static folder path. System.String defaultDocument The default document name Returns Type Description WebServer The webserver instance. | Improve this Doc View Source WithVirtualPaths(WebServer, Dictionary<String, String>, String) Add the StaticFilesModule with Multiple paths Declaration public static WebServer WithVirtualPaths(this WebServer webserver, Dictionary<string, string> virtualPaths, string defaultDocument = null) Parameters Type Name Description WebServer webserver The webserver. Dictionary < System.String , System.String > virtualPaths The virtual paths. System.String defaultDocument The default document. Returns Type Description WebServer | Improve this Doc View Source WithWebApi(WebServer, Assembly) Add WebApiModule to WebServer Declaration public static WebServer WithWebApi(this WebServer webserver, Assembly assembly = null) Parameters Type Name Description WebServer webserver The webserver instance. Assembly assembly The assembly to load WebApi Controllers from. Leave null to avoid autoloading. Returns Type Description WebServer The webserver instance. | Improve this Doc View Source WithWebApiController<T>(WebServer) Add WebApi Controller to WebServer Declaration public static WebServer WithWebApiController<T>(this WebServer webserver)where T : WebApiController, new () Parameters Type Name Description WebServer webserver The webserver instance. Returns Type Description WebServer The webserver instance. Type Parameters Name Description T | Improve this Doc View Source WithWebSocket(WebServer, Assembly) Add WebSocketsModule to WebServer Declaration public static WebServer WithWebSocket(this WebServer webserver, Assembly assembly = null) Parameters Type Name Description WebServer webserver The webserver instance. Assembly assembly The assembly to load Web Sockets from. Leave null to avoid autoloading. Returns Type Description WebServer The webserver instance."
  },
  "api/Unosquare.Labs.EmbedIO.ISessionWebModule.html": {
    "href": "api/Unosquare.Labs.EmbedIO.ISessionWebModule.html",
    "title": "Interface ISessionWebModule | Unosquare EmbedIO",
    "keywords": "Interface ISessionWebModule Interface to create session modules Inherited Members IWebModule.Name IWebModule.Handlers IWebModule.AddHandler(String, HttpVerbs, ResponseHandler) IWebModule.Server Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public interface ISessionWebModule : IWebModule Properties | Improve this Doc View Source Expiration Gets or sets the expiration time for the sessions. Declaration TimeSpan Expiration { get; set; } Property Value Type Description TimeSpan The expiration. | Improve this Doc View Source Sessions The dictionary holding the sessions Direct access is guaranteed to be thread-safe Declaration IReadOnlyDictionary<string, SessionInfo> Sessions { get; } Property Value Type Description IReadOnlyDictionary < System.String , SessionInfo > The sessions. Methods | Improve this Doc View Source DeleteSession(SessionInfo) Delete a session for the given session info No exceptions are thrown if the session is not found Declaration void DeleteSession(SessionInfo session) Parameters Type Name Description SessionInfo session The session info. | Improve this Doc View Source DeleteSession(HttpListenerContext) Delete the session object for the given context If no session exists for the context, then null is returned Declaration void DeleteSession(HttpListenerContext context) Parameters Type Name Description HttpListenerContext context | Improve this Doc View Source GetSession(HttpListenerContext) Gets a session object for the given server context. If no session exists for the context, then null is returned Declaration SessionInfo GetSession(HttpListenerContext context) Parameters Type Name Description HttpListenerContext context The context. Returns Type Description SessionInfo | Improve this Doc View Source GetSession(WebSocketContext) Gets a session object for the given WebSocket context. If no session exists for the context, then null is returned Declaration SessionInfo GetSession(WebSocketContext context) Parameters Type Name Description WebSocketContext context The context. Returns Type Description SessionInfo"
  },
  "api/Unosquare.Labs.EmbedIO.Map.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Map.html",
    "title": "Class Map | Unosquare EmbedIO",
    "keywords": "Class Map Represents a binding of path and verb to a given method call (delegate) Inheritance System.Object Map Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class Map : object Properties | Improve this Doc View Source Path The HTTP resource path Declaration public string Path { get; set; } Property Value Type Description System.String | Improve this Doc View Source ResponseHandler The delegate to call for the given path and verb. Declaration public ResponseHandler ResponseHandler { get; set; } Property Value Type Description ResponseHandler | Improve this Doc View Source Verb The HTTP Verb of this Map Declaration public HttpVerbs Verb { get; set; } Property Value Type Description HttpVerbs"
  },
  "api/Unosquare.Labs.EmbedIO.MiddlewareContext.html": {
    "href": "api/Unosquare.Labs.EmbedIO.MiddlewareContext.html",
    "title": "Class MiddlewareContext | Unosquare EmbedIO",
    "keywords": "Class MiddlewareContext Represents the Middleware's context Inheritance System.Object MiddlewareContext Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class MiddlewareContext : object Constructors | Improve this Doc View Source MiddlewareContext(HttpListenerContext, WebServer) Instances a Middleware context Declaration public MiddlewareContext(HttpListenerContext httpListenerContext, WebServer webserver) Parameters Type Name Description HttpListenerContext httpListenerContext The HttpListenerContext WebServer webserver The WebServer instance Properties | Improve this Doc View Source Handled Flags if the middleware resolves the request Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source HttpContext The Http Context Declaration public HttpListenerContext HttpContext { get; } Property Value Type Description HttpListenerContext | Improve this Doc View Source WebServer Web Server instance Declaration public WebServer WebServer { get; } Property Value Type Description WebServer"
  },
  "api/Unosquare.Labs.EmbedIO.Modules.CorsModule.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.CorsModule.html",
    "title": "Class CorsModule | Unosquare EmbedIO",
    "keywords": "Class CorsModule CORS control Module Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts) on a web page to be requested from another domain outside the domain from which the resource originated. Inheritance System.Object WebModuleBase CorsModule Inherited Members WebModuleBase.Handlers WebModuleBase.Server WebModuleBase.AddHandler(String, HttpVerbs, ResponseHandler) Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class CorsModule : WebModuleBase, IWebModule Constructors | Improve this Doc View Source CorsModule(String, String, String) Generates the rules for CORS TODO: Add Whitelist origins with Regex TODO: Add Path Regex, just apply CORS in some paths TODO: Handle valid headers in other modules Declaration public CorsModule(string origins = null, string headers = null, string methods = null) Parameters Type Name Description System.String origins The valid origins, default all System.String headers The valid headers, default all System.String methods The valid method, default all Properties | Improve this Doc View Source Name Module's name Declaration public override string Name { get; } Property Value Type Description System.String Overrides WebModuleBase.Name"
  },
  "api/Unosquare.Labs.EmbedIO.Modules.LocalSessionModule.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.LocalSessionModule.html",
    "title": "Class LocalSessionModule | Unosquare EmbedIO",
    "keywords": "Class LocalSessionModule A simple module to handle in-memory sessions. Do not use for distributed applications Inheritance System.Object WebModuleBase LocalSessionModule Inherited Members WebModuleBase.Handlers WebModuleBase.Server WebModuleBase.AddHandler(String, HttpVerbs, ResponseHandler) Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class LocalSessionModule : WebModuleBase, ISessionWebModule, IWebModule Constructors | Improve this Doc View Source LocalSessionModule() Initializes a new instance of the LocalSessionModule class. Declaration public LocalSessionModule() Fields | Improve this Doc View Source m_Sessions The concurrent dictionary holding the sessions Declaration protected readonly Dictionary<string, SessionInfo> m_Sessions Field Value Type Description Dictionary < System.String , SessionInfo > | Improve this Doc View Source SessionsSyncLock The sessions dictionary synchronization lock Declaration protected readonly object SessionsSyncLock Field Value Type Description System.Object Properties | Improve this Doc View Source CookiePath Gets or sets the cookie path. If left empty, a cookie will be created for each path. The default value is \"/\" If a route is specified, then session cookies will be created only for the given path. Examples of this are: \"/\" \"/app1/\" Declaration public string CookiePath { get; set; } Property Value Type Description System.String The cookie path. | Improve this Doc View Source Expiration Gets or sets the expiration. By default, expiration is 30 minutes Declaration public TimeSpan Expiration { get; set; } Property Value Type Description TimeSpan The expiration. Implements ISessionWebModule.Expiration | Improve this Doc View Source Item[String] Gets the SessionInfo with the specified cookie value. Returns null when the session is not found. Declaration public SessionInfo this[string cookieValue] { get; } Parameters Type Name Description System.String cookieValue The cookie value. Property Value Type Description SessionInfo The SessionInfo . | Improve this Doc View Source Name Gets the name of this module. Declaration public override string Name { get; } Property Value Type Description System.String The name. Overrides WebModuleBase.Name Implements IWebModule.Name | Improve this Doc View Source Sessions The dictionary holding the sessions Declaration public IReadOnlyDictionary<string, SessionInfo> Sessions { get; } Property Value Type Description IReadOnlyDictionary < System.String , SessionInfo > The sessions. Implements ISessionWebModule.Sessions Methods | Improve this Doc View Source DeleteSession(SessionInfo) Delete a session for the given session info Declaration public void DeleteSession(SessionInfo session) Parameters Type Name Description SessionInfo session The session info. Implements ISessionWebModule.DeleteSession(SessionInfo) | Improve this Doc View Source DeleteSession(HttpListenerContext) Delete the session object for the given context Declaration public void DeleteSession(HttpListenerContext context) Parameters Type Name Description HttpListenerContext context Implements ISessionWebModule.DeleteSession(HttpListenerContext) | Improve this Doc View Source GetSession(HttpListenerContext) Gets a session object for the given server context. If no session exists for the context, then null is returned Declaration public SessionInfo GetSession(HttpListenerContext context) Parameters Type Name Description HttpListenerContext context The context. Returns Type Description SessionInfo Implements ISessionWebModule.GetSession(HttpListenerContext) | Improve this Doc View Source GetSession(WebSocketContext) Gets the session. Declaration public SessionInfo GetSession(WebSocketContext context) Parameters Type Name Description WebSocketContext context The context. Returns Type Description SessionInfo Implements ISessionWebModule.GetSession(WebSocketContext)"
  },
  "api/Unosquare.Labs.EmbedIO.Modules.WebApiController.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.WebApiController.html",
    "title": "Class WebApiController | Unosquare EmbedIO",
    "keywords": "Class WebApiController Inherit from this class and define your own Web API methods You must RegisterController in the Web API Module to make it active Inheritance System.Object WebApiController PeopleController Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public abstract class WebApiController : object"
  },
  "README.html": {
    "href": "README.html",
    "title": "NuGet Installation: | Unosquare EmbedIO",
    "keywords": "⭐ Please star this project if you find it useful! A tiny, cross-platform, module based, MIT-licensed web server for .NET Framework and .NET Core Written entirely in C# .NET Core portable library Network operations use the async/await pattern: Responses are handled asynchronously Cross-platform[1]: tested in Mono 3.10.x on Windows and on a custom Yocto image for the Raspberry Pi Extensible: Write your own modules -- For example, video streaming, UPnP, etc. Check out EmbedIO Extras for additional modules. Small memory footprint Create REST APIs quickly with the out-of-the-box Web Api module Serve static files with 1 line of code (also out-of-the-box) Handle sessions with the built-in LocalSessionWebModule WebSockets support (see notes below) CORS support. Origin, Header and Method validation with OPTIONS preflight Supports HTTP 206 Partial Content OWIN Middleware support via OWIN Middleware Module . For detailed usage and REST API implementation, download the code and take a look at the Samples project Some usage scenarios : Write a cross-platform GUI entirely in CSS/HTML/JS Write a game using Babylon.js and make EmbedIO your serve your code and assets Create GUIs for Windows services or Linux daemons Works well with LiteLib - add SQLite support in minutes! Write client applications with real-time communication between them Some notes regarding WebSocket support: Runtime WebSocket support Notes NET452 Yes Support Win7+ OS using a custom System.Net implementation based on Mono and websocket-sharp NET46 Yes Support Win8+ OS using native System.Net library MONO Yes Support Windows and Linux using custom System.Net implementation based on Mono and websocket-sharp NETCORE10 Yes Support using a custom System.Net implementation based on Mono and websocket-sharp EmbedIO before version 1.4.0 uses Newtonsoft JSON and an internal logger subsystem based on ILog interface. NuGet Installation: PM> Install-Package EmbedIO Basic Example: Please note the comments are the important part here. More info is available in the samples. namespace Company.Project { using System; using Unosquare.Labs.EmbedIO; using Unosquare.Labs.EmbedIO.Modules; class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> static void Main(string[] args) { var url = \"http://localhost:9696/\"; if (args.Length > 0) url = args[0]; // Our web server is disposable. using (var server = new WebServer(url)) { // First, we will configure our web server by adding Modules. // Please note that order DOES matter. // ================================================================================================ // If we want to enable sessions, we simply register the LocalSessionModule // Beware that this is an in-memory session storage mechanism so, avoid storing very large objects. // You can use the server.GetSession() method to get the SessionInfo object and manupulate it. // You could potentially implement a distributed session module using something like Redis server.RegisterModule(new LocalSessionModule()); // Here we setup serving of static files server.RegisterModule(new StaticFilesModule(\"c:/web\")); // The static files module will cache small files in ram until it detects they have been modified. server.Module<StaticFilesModule>().UseRamCache = true; server.Module<StaticFilesModule>().DefaultExtension = \".html\"; // We don't need to add the line below. The default document is always index.html. //server.Module<Modules.StaticFilesWebModule>().DefaultDocument = \"index.html\"; // Once we've registered our modules and configured them, we call the RunAsync() method. // This is a non-blocking method (it return immediately) so in this case we avoid // disposing of the object until a key is pressed. //server.Run(); server.RunAsync(); // Fire up the browser to show the content if we are debugging! #if DEBUG var browser = new System.Diagnostics.Process() { StartInfo = new System.Diagnostics.ProcessStartInfo(url) { UseShellExecute = true } }; browser.Start(); #endif // Wait for any key to be pressed before disposing of our web server. // In a service we'd manage the lifecycle of of our web server using // something like a BackgroundWorker or a ManualResetEvent. Console.ReadKey(true); } } } } Fluent Example: Many extension methods are available. This allows you to create a web server instance in a fluent style by dotting in configuration options. namespace Company.Project { using System; using Unosquare.Labs.EmbedIO; internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { var url = \"http://localhost:9696/\"; if (args.Length > 0) url = args[0]; // Create Webserver and attach LocalSession and Static // files module and CORS enabled var server = WebServer .Create(url) .EnableCors() .WithLocalSession() .WithStaticFolderAt(\"c:/web\"); var cts = new CancellationTokenSource(); var task = server.RunAsync(cts.Token); // Fire up the browser to show the content if we are debugging! #if DEBUG var browser = new System.Diagnostics.Process() { StartInfo = new System.Diagnostics.ProcessStartInfo(url) {UseShellExecute = true} }; browser.Start(); #endif // Wait for any key to be pressed before disposing of our web server. // In a service we'd manage the lifecycle of of our web server using // something like a BackgroundWorker or a ManualResetEvent. Console.ReadKey(true); cts.Cancel(); try { task.Wait(); } catch (AggregateException) { // We'd also actually verify the exception cause was that the task // was cancelled. server.Dispose(); } } } } REST API Example: The WebApi module supports two routing strategies: Wildcard and Regex. By default, and in order to maintain backwards compatibility, the WebApi module will use the Wildcard Routing Strategy and match routes using the asterisk * character in the route. For example: The route /api/people/* will match any request with a URL starting with the two first URL segments api and people and ending with anything. The route /api/people/hello will be matched. You can also use wildcards in the middle of the route. The route /api/people/*/details will match requests starting with the two first URL segments api and people , and ending with a details segment. The route /api/people/hello/details will be matched. Note that most REST services can be designed with this simpler Wildcard routing startegy. However, the Regex matching strategy is the current recommended approach as we might be deprecating the Wildcard strategy altogether On the other hand, the Regex Routing Strategy will try to match and resolve the values from a route template, in a similar fashion to Microsoft's Web API 2. A method with the following route /api/people/{id} is going to match any request URL with three segments: the first two api and people and the last one is going to be parsed or converted to the type in the id argument of the handling method signature. Please read on if this was confusing as it is much simpler than it sounds. Additionally, you can put multiple values to match, for example /api/people/{mainSkill}/{age} , and receive the parsed values from the URL straight into the arguments of your handler method. During server setup: // The routing strategy is Wildcard by default, but you can change it to Regex as follows: var server = new WebServer(\"http://localhost:9696/\", RoutingStrategy.Regex); server.RegisterModule(new WebApiModule()); server.Module<WebApiModule>().RegisterController<PeopleController>(); And our controller class (using Regex Strategy) looks like: public class PeopleController : WebApiController { [WebApiHandler(HttpVerbs.Get, \"/api/people/{id}\")] public bool GetPeople(WebServer server, HttpListenerContext context, int id) { try { if (People.Any(p => p.Key == id)) { return context.JsonResponse(People.FirstOrDefault(p => p.Key == id)); } } catch (Exception ex) { return HandleError(context, ex, (int)HttpStatusCode.InternalServerError); } } protected bool HandleError(HttpListenerContext context, Exception ex, int statusCode = 500) { var errorResponse = new { Title = \"Unexpected Error\", ErrorCode = ex.GetType().Name, Description = ex.ExceptionMessage(), }; context.Response.StatusCode = statusCode; return context.JsonResponse(errorResponse); } } Or if you want to use the Wildcard strategy (which is the default): public class PeopleController : WebApiController { [WebApiHandler(HttpVerbs.Get, \"/api/people/*\")] public bool GetPeople(WebServer server, HttpListenerContext context) { try { var lastSegment = context.Request.Url.Segments.Last(); if (lastSegment.EndsWith(\"/\")) return context.JsonResponse(People); int key = 0; if (int.TryParse(lastSegment, out key) && People.Any(p => p.Key == key)) { return context.JsonResponse(People.FirstOrDefault(p => p.Key == key)); } throw new KeyNotFoundException(\"Key Not Found: \" + lastSegment); } catch (Exception ex) { return HandleError(context, ex, (int)HttpStatusCode.InternalServerError); } } protected bool HandleError(HttpListenerContext context, Exception ex, int statusCode = 500) { var errorResponse = new { Title = \"Unexpected Error\", ErrorCode = ex.GetType().Name, Description = ex.ExceptionMessage(), }; context.Response.StatusCode = statusCode; return context.JsonResponse(errorResponse); } } WebSockets Example: During server setup: server.RegisterModule(new WebSocketsModule()); server.Module<WebSocketsModule>().RegisterWebSocketsServer<WebSocketsChatServer>(\"/chat\"); And our web sockets server class looks like: /// <summary> /// Defines a very simple chat server /// </summary> public class WebSocketsChatServer : WebSocketsServer { public WebSocketsChatServer() : base(true, 0) { // placeholder } /// <summary> /// Called when this WebSockets Server receives a full message (EndOfMessage) form a WebSockets client. /// </summary> /// <param name=\"context\">The context.</param> /// <param name=\"rxBuffer\">The rx buffer.</param> /// <param name=\"rxResult\">The rx result.</param> protected override void OnMessageReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult) { var session = this.WebServer.GetSession(context); foreach (var ws in this.WebSockets) { if (ws != context) this.Send(ws, Encoding.UTF8.GetString(rxBuffer)); } } /// <summary> /// Gets the name of the server. /// </summary> /// <value> /// The name of the server. /// </value> public override string ServerName { get { return \"Chat Server\"; } } /// <summary> /// Called when this WebSockets Server accepts a new WebSockets client. /// </summary> /// <param name=\"context\">The context.</param> protected override void OnClientConnected(WebSocketContext context) { this.Send(context, \"Welcome to the chat room!\"); foreach (var ws in this.WebSockets) { if (ws != context) this.Send(ws, \"Someone joined the chat room.\"); } } /// <summary> /// Called when this WebSockets Server receives a message frame regardless if the frame represents the EndOfMessage. /// </summary> /// <param name=\"context\">The context.</param> /// <param name=\"rxBuffer\">The rx buffer.</param> /// <param name=\"rxResult\">The rx result.</param> protected override void OnFrameReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult) { return; } /// <summary> /// Called when the server has removed a WebSockets connected client for any reason. /// </summary> /// <param name=\"context\">The context.</param> protected override void OnClientDisconnected(WebSocketContext context) { this.Broadcast(string.Format(\"Someone left the chat room.\")); } } Notes [1] - EmbedIO uses lowercase URL parts. In Windows systems this is the expected behaviour but in Unix systems using MONO please refer to Mono IOMap if you want to work with case insensitive URL parts."
  },
  "api/toc.html": {
    "href": "api/toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "api/Unosquare.Labs.EmbedIO.CompressionMethod.html": {
    "href": "api/Unosquare.Labs.EmbedIO.CompressionMethod.html",
    "title": "Enum CompressionMethod | Unosquare EmbedIO",
    "keywords": "Enum CompressionMethod Specifies the compression method used to compress a message on the WebSocket connection. Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public enum CompressionMethod : byte Remarks The compression methods that can be used are defined in Compression Extensions for WebSocket . Fields Name Description Deflate Specifies DEFLATE. Gzip Specifies GZIP. None Specifies non compression."
  },
  "api/Unosquare.Labs.EmbedIO.HttpVerbs.html": {
    "href": "api/Unosquare.Labs.EmbedIO.HttpVerbs.html",
    "title": "Enum HttpVerbs | Unosquare EmbedIO",
    "keywords": "Enum HttpVerbs Enumerates the different HTTP Verbs Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public enum HttpVerbs : int Fields Name Description Any Wildcard Method Delete DELETE Method Get GET Method Head HEAD method Options OPTIONS method Patch PATCH method Post POST method Put PUT method"
  },
  "api/Unosquare.Labs.EmbedIO.IWebModule.html": {
    "href": "api/Unosquare.Labs.EmbedIO.IWebModule.html",
    "title": "Interface IWebModule | Unosquare EmbedIO",
    "keywords": "Interface IWebModule Interface to create web modules Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public interface IWebModule Properties | Improve this Doc View Source Handlers Gets the handlers. Declaration ModuleMap Handlers { get; } Property Value Type Description ModuleMap The handlers. | Improve this Doc View Source Name Gets the friendly name of the module. Declaration string Name { get; } Property Value Type Description System.String The name. | Improve this Doc View Source Server Gets the server owning this module. This property is set automatically after registering the module. Declaration WebServer Server { get; set; } Property Value Type Description WebServer The server. Methods | Improve this Doc View Source AddHandler(String, HttpVerbs, ResponseHandler) Adds a handler that gets called when a path and verb are matched. Declaration void AddHandler(string path, HttpVerbs verb, ResponseHandler handler) Parameters Type Name Description System.String path The path. HttpVerbs verb The verb. ResponseHandler handler The handler."
  },
  "api/Unosquare.Labs.EmbedIO.Middleware.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Middleware.html",
    "title": "Class Middleware | Unosquare EmbedIO",
    "keywords": "Class Middleware Represents a Middleware abstract class Inheritance System.Object Middleware Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public abstract class Middleware : object Methods | Improve this Doc View Source Invoke(MiddlewareContext) Invokes the Middleware with a context Declaration public abstract Task Invoke(MiddlewareContext context) Parameters Type Name Description MiddlewareContext context The Middleware context Returns Type Description Task"
  },
  "api/Unosquare.Labs.EmbedIO.ModuleMap.html": {
    "href": "api/Unosquare.Labs.EmbedIO.ModuleMap.html",
    "title": "Class ModuleMap | Unosquare EmbedIO",
    "keywords": "Class ModuleMap Represents a list which binds Paths and their corresponding HTTP Verbs to Method calls Inheritance System.Object ModuleMap Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class ModuleMap : List<Map> Fields | Improve this Doc View Source AnyPath Defines the path used to bind to all paths Declaration public const string AnyPath = null Field Value Type Description System.String"
  },
  "api/Unosquare.Labs.EmbedIO.Modules.FallbackModule.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.FallbackModule.html",
    "title": "Class FallbackModule | Unosquare EmbedIO",
    "keywords": "Class FallbackModule Represents a module to fallback any request Inheritance System.Object WebModuleBase FallbackModule Inherited Members WebModuleBase.Handlers WebModuleBase.Server WebModuleBase.AddHandler(String, HttpVerbs, ResponseHandler) Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class FallbackModule : WebModuleBase, IWebModule Constructors | Improve this Doc View Source FallbackModule(Func<WebServer, HttpListenerContext, Boolean>) Initializes a new instance of the FallbackModule class. Declaration public FallbackModule(Func<WebServer, HttpListenerContext, bool> action) Parameters Type Name Description Func < WebServer , HttpListenerContext , System.Boolean > action The action. | Improve this Doc View Source FallbackModule(String) Initializes a new instance of the FallbackModule class. Declaration public FallbackModule(string redirectUrl) Parameters Type Name Description System.String redirectUrl The redirect URL. Properties | Improve this Doc View Source FallbackAction Gets or sets the fallback action. Declaration public Func<WebServer, HttpListenerContext, bool> FallbackAction { get; } Property Value Type Description Func < WebServer , HttpListenerContext , System.Boolean > | Improve this Doc View Source Name Gets the name of this module. Declaration public override string Name { get; } Property Value Type Description System.String Overrides WebModuleBase.Name | Improve this Doc View Source RedirectUrl Gets the redirect URL. Declaration public string RedirectUrl { get; } Property Value Type Description System.String See Also WebModuleBase"
  },
  "api/Unosquare.Labs.EmbedIO.Modules.StaticFilesModule.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.StaticFilesModule.html",
    "title": "Class StaticFilesModule | Unosquare EmbedIO",
    "keywords": "Class StaticFilesModule Represents a simple module to server static files from the file system. Inheritance System.Object WebModuleBase StaticFilesModule Inherited Members WebModuleBase.Handlers WebModuleBase.Server WebModuleBase.AddHandler(String, HttpVerbs, ResponseHandler) Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class StaticFilesModule : WebModuleBase, IWebModule Constructors | Improve this Doc View Source StaticFilesModule(Dictionary<String, String>) Initializes a new instance of the StaticFilesModule class. Declaration public StaticFilesModule(Dictionary<string, string> paths) Parameters Type Name Description Dictionary < System.String , System.String > paths The paths. | Improve this Doc View Source StaticFilesModule(String, Dictionary<String, String>, Dictionary<String, String>) Initializes a new instance of the StaticFilesModule class. Declaration public StaticFilesModule(string fileSystemPath, Dictionary<string, string> headers = null, Dictionary<string, string> additionalPaths = null) Parameters Type Name Description System.String fileSystemPath The file system path. Dictionary < System.String , System.String > headers The headers to set in every request. Dictionary < System.String , System.String > additionalPaths The additional paths. Fields | Improve this Doc View Source DefaultDocumentName Default document constant to \"index.html\" Declaration public const string DefaultDocumentName = null Field Value Type Description System.String | Improve this Doc View Source DefaultHeaders The default headers Declaration public Dictionary<string, string> DefaultHeaders Field Value Type Description Dictionary < System.String , System.String > Properties | Improve this Doc View Source DefaultDocument Gets or sets the default document. Defaults to \"index.html\" Example: \"root.xml\" Declaration public string DefaultDocument { get; set; } Property Value Type Description System.String The default document. | Improve this Doc View Source DefaultExtension Gets or sets the default extension. Defaults to null Example: \".html\" Declaration public string DefaultExtension { get; set; } Property Value Type Description System.String The default extension. | Improve this Doc View Source FileSystemPath Gets the file system path from which files are retrieved. Declaration public string FileSystemPath { get; protected set; } Property Value Type Description System.String The file system path. | Improve this Doc View Source MaxRamCacheFileSize Gets or sets the maximum size of the ram cache file. Declaration public int MaxRamCacheFileSize { get; set; } Property Value Type Description System.Int32 The maximum size of the ram cache file. | Improve this Doc View Source MimeTypes Gets the collection holding the MIME types. Declaration public ReadOnlyDictionary<string, string> MimeTypes { get; } Property Value Type Description ReadOnlyDictionary < System.String , System.String > The MIME types. | Improve this Doc View Source Name Gets the name of this module. Declaration public override string Name { get; } Property Value Type Description System.String The name. Overrides WebModuleBase.Name | Improve this Doc View Source UseGzip Gets or sets a value indicating whether [use gzip]. Declaration public bool UseGzip { get; set; } Property Value Type Description System.Boolean true if [use gzip]; otherwise, false . | Improve this Doc View Source UseRamCache Gets or sets a value indicating whether or not to use the RAM Cache feature RAM Cache will only cache files that are MaxRamCacheSize in bytes or less Declaration public bool UseRamCache { get; set; } Property Value Type Description System.Boolean true if [use ram cache]; otherwise, false . | Improve this Doc View Source VirtualPaths Gets the virtual paths. Declaration public ReadOnlyDictionary<string, string> VirtualPaths { get; } Property Value Type Description ReadOnlyDictionary < System.String , System.String > The virtual paths. Methods | Improve this Doc View Source ClearRamCache() Clears the RAM cache. Declaration public void ClearRamCache() | Improve this Doc View Source RegisterVirtualPath(String, String) Registers the virtual path. Declaration public void RegisterVirtualPath(string virtualPath, string physicalPath) Parameters Type Name Description System.String virtualPath The virtual path. System.String physicalPath The physical path. | Improve this Doc View Source UnregisterVirtualPath(String) Unregisters the virtual path. Declaration public void UnregisterVirtualPath(string virtualPath) Parameters Type Name Description System.String virtualPath The virtual path."
  },
  "api/Unosquare.Labs.EmbedIO.Modules.WebApiModule.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.WebApiModule.html",
    "title": "Class WebApiModule | Unosquare EmbedIO",
    "keywords": "Class WebApiModule A very simple module to register class methods as handlers. Public instance methods that match the WebServerModule.ResponseHandler signature, and have the WebApi handler attribute will be used to respond to web server requests Inheritance System.Object WebModuleBase WebApiModule Inherited Members WebModuleBase.Handlers WebModuleBase.Server WebModuleBase.AddHandler(String, HttpVerbs, ResponseHandler) Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class WebApiModule : WebModuleBase, IWebModule Constructors | Improve this Doc View Source WebApiModule() Initializes a new instance of the WebApiModule class. Declaration public WebApiModule() Properties | Improve this Doc View Source ControllersCount Gets the number of controller objects registered in this API Declaration public int ControllersCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Gets the name of this module. Declaration public override string Name { get; } Property Value Type Description System.String The name. Overrides WebModuleBase.Name Methods | Improve this Doc View Source RegisterController(Type) Registers the controller. Declaration public void RegisterController(Type controllerType) Parameters Type Name Description Type controllerType Type of the controller. | Improve this Doc View Source RegisterController(Type, Func<Object>) Registers the controller. Declaration public void RegisterController(Type controllerType, Func<object> controllerFactory) Parameters Type Name Description Type controllerType Type of the controller. Func < System.Object > controllerFactory The controller factory method. | Improve this Doc View Source RegisterController<T>() Registers the controller. Declaration public void RegisterController<T>()where T : WebApiController, new () Type Parameters Name Description T | Improve this Doc View Source RegisterController<T>(Func<T>) Registers the controller. Declaration public void RegisterController<T>(Func<T> controllerFactory)where T : WebApiController Parameters Type Name Description Func <T> controllerFactory Type Parameters Name Description T Extension Methods Extensions.LoadApiControllers(WebApiModule, Assembly)"
  },
  "api/Unosquare.Labs.EmbedIO.Modules.WebSocketHandlerAttribute.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.WebSocketHandlerAttribute.html",
    "title": "Class WebSocketHandlerAttribute | Unosquare EmbedIO",
    "keywords": "Class WebSocketHandlerAttribute Decorate methods within controllers with this attribute in order to make them callable from the Web API Module Method Must match the WebServerModule. Inheritance System.Object WebSocketHandlerAttribute Namespace :Unosquare.Labs.EmbedIO.Modules Assembly :Unosquare.Labs.EmbedIO.dll Syntax public sealed class WebSocketHandlerAttribute : Attribute Constructors | Improve this Doc View Source WebSocketHandlerAttribute(String) Initializes a new instance of the WebSocketHandlerAttribute class. Declaration public WebSocketHandlerAttribute(string path) Parameters Type Name Description System.String path The path. Properties | Improve this Doc View Source Path Gets or sets the path. Declaration public string Path { get; } Property Value Type Description System.String The paths."
  },
  "api/Unosquare.Labs.EmbedIO.Modules.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Modules.html",
    "title": "Namespace Unosquare.Labs.EmbedIO.Modules | Unosquare EmbedIO",
    "keywords": "Namespace Unosquare.Labs.EmbedIO.Modules Classes CorsModule CORS control Module Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts) on a web page to be requested from another domain outside the domain from which the resource originated. FallbackModule Represents a module to fallback any request LocalSessionModule A simple module to handle in-memory sessions. Do not use for distributed applications StaticFilesModule Represents a simple module to server static files from the file system. WebApiController Inherit from this class and define your own Web API methods You must RegisterController in the Web API Module to make it active WebApiHandlerAttribute Decorate methods within controllers with this attribute in order to make them callable from the Web API Module Method Must match the WebServerModule. WebApiModule A very simple module to register class methods as handlers. Public instance methods that match the WebServerModule.ResponseHandler signature, and have the WebApi handler attribute will be used to respond to web server requests WebSocketHandlerAttribute Decorate methods within controllers with this attribute in order to make them callable from the Web API Module Method Must match the WebServerModule. WebSocketsModule A WebSockets module conforming to RFC 6455 Works only on Chrome 16+, FireFox 11+ and IE 10+ This module is experimental and still needs extensive testing. WebSocketsServer A base class that defines how to handle WebSockets connections. It keeps a list of connected WebSockets and has the basic logic to handle connections and data transmission"
  },
  "api/Unosquare.Labs.EmbedIO.ResponseHandler.html": {
    "href": "api/Unosquare.Labs.EmbedIO.ResponseHandler.html",
    "title": "Delegate ResponseHandler | Unosquare EmbedIO",
    "keywords": "Delegate ResponseHandler A delegate that handles certain action in a module given a path and a verb Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public delegate bool ResponseHandler(WebServer server, HttpListenerContext context); Parameters Type Name Description WebServer server The server. HttpListenerContext context The context. Returns Type Description System.Boolean"
  },
  "api/Unosquare.Labs.EmbedIO.Samples.Person.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Samples.Person.html",
    "title": "Class Person | Unosquare EmbedIO",
    "keywords": "Class Person A simple model representing a person Inheritance System.Object Person Namespace :Unosquare.Labs.EmbedIO.Samples Assembly :Unosquare.Labs.EmbedIO.Samples.dll Syntax public class Person : LiteModel Properties | Improve this Doc View Source Age Declaration public int Age { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EmailAddress Declaration public string EmailAddress { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source PhotoUrl Declaration public string PhotoUrl { get; } Property Value Type Description System.String"
  },
  "api/Unosquare.Labs.EmbedIO.Samples.StaticFilesSample.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Samples.StaticFilesSample.html",
    "title": "Class StaticFilesSample | Unosquare EmbedIO",
    "keywords": "Class StaticFilesSample Sample helper Inheritance System.Object StaticFilesSample Namespace :Unosquare.Labs.EmbedIO.Samples Assembly :Unosquare.Labs.EmbedIO.Samples.dll Syntax public static class StaticFilesSample : object Properties | Improve this Doc View Source HtmlRootPath Gets the HTML root path. Declaration public static string HtmlRootPath { get; } Property Value Type Description System.String The HTML root path. Methods | Improve this Doc View Source Setup(WebServer, Boolean) Setups the specified server. Declaration public static void Setup(WebServer server, bool useGzip) Parameters Type Name Description WebServer server The server. System.Boolean useGzip if set to true [use gzip]."
  },
  "api/Unosquare.Labs.EmbedIO.Samples.WebSocketsTerminalServer.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Samples.WebSocketsTerminalServer.html",
    "title": "Class WebSocketsTerminalServer | Unosquare EmbedIO",
    "keywords": "Class WebSocketsTerminalServer Define a command-line interface terminal Inheritance System.Object WebSocketsServer WebSocketsTerminalServer Inherited Members WebSocketsServer.WebServer WebSocketsServer.WebSockets WebSocketsServer.AcceptWebSocket(WebServer, HttpListenerContext) WebSocketsServer.Send(WebSocketContext, String) WebSocketsServer.Send(WebSocketContext, Byte[]) WebSocketsServer.Broadcast(Byte[]) WebSocketsServer.Broadcast(String) WebSocketsServer.Close(WebSocketContext) WebSocketsServer.Dispose() WebSocketsServer.Dispose(Boolean) Namespace :Unosquare.Labs.EmbedIO.Samples Assembly :Unosquare.Labs.EmbedIO.Samples.dll Syntax public class WebSocketsTerminalServer : WebSocketsServer Properties | Improve this Doc View Source ServerName Gets the name of the server. Declaration public override string ServerName { get; } Property Value Type Description System.String The name of the server. Overrides WebSocketsServer.ServerName Methods | Improve this Doc View Source OnClientConnected(WebSocketContext) Called when this WebSockets Server accepts a new WebSockets client. Declaration protected override void OnClientConnected(WebSocketContext context) Parameters Type Name Description WebSocketContext context The context. Overrides WebSocketsServer.OnClientConnected(WebSocketContext) | Improve this Doc View Source OnClientDisconnected(WebSocketContext) Called when the server has removed a WebSockets connected client for any reason. Declaration protected override void OnClientDisconnected(WebSocketContext context) Parameters Type Name Description WebSocketContext context The context. Overrides WebSocketsServer.OnClientDisconnected(WebSocketContext) | Improve this Doc View Source OnFrameReceived(WebSocketContext, Byte[], WebSocketReceiveResult) Called when this WebSockets Server receives a message frame regardless if the frame represents the EndOfMessage. Declaration protected override void OnFrameReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult) Parameters Type Name Description WebSocketContext context The context. System.Byte [] rxBuffer The rx buffer. WebSocketReceiveResult rxResult The rx result. | Improve this Doc View Source OnMessageReceived(WebSocketContext, Byte[], WebSocketReceiveResult) Called when this WebSockets Server receives a full message (EndOfMessage) form a WebSockets client. Declaration protected override void OnMessageReceived(WebSocketContext context, byte[] rxBuffer, WebSocketReceiveResult rxResult) Parameters Type Name Description WebSocketContext context The context. System.Byte [] rxBuffer The rx buffer. WebSocketReceiveResult rxResult The rx result."
  },
  "api/Unosquare.Labs.EmbedIO.Samples.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Samples.html",
    "title": "Namespace Unosquare.Labs.EmbedIO.Samples | Unosquare EmbedIO",
    "keywords": "Namespace Unosquare.Labs.EmbedIO.Samples Classes PeopleController A very simple controller to handle People CRUD. Notice how it Inherits from WebApiController and the methods have WebApiHandler attributes This is for sampling purposes only. Person A simple model representing a person StaticFilesSample Sample helper WebSocketsChatServer Defines a very simple chat server WebSocketsSample WebSocketsTerminalServer Define a command-line interface terminal"
  },
  "api/Unosquare.Net.CloseStatusCode.html": {
    "href": "api/Unosquare.Net.CloseStatusCode.html",
    "title": "Enum CloseStatusCode | Unosquare EmbedIO",
    "keywords": "Enum CloseStatusCode Indicates the status code for the WebSocket connection close. Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public enum CloseStatusCode : ushort Remarks The values of this enumeration are defined in Section 7.4 of RFC 6455. \"Reserved value\" must not be set as a status code in a connection close frame by an endpoint. It's designated for use in applications expecting a status code to indicate that the connection was closed due to the system grounds. Fields Name Description Abnormal Equivalent to close status 1006. Indicates that the connection was closed abnormally. A Reserved value. Away Equivalent to close status 1001. Indicates that an endpoint is going away. InvalidData Equivalent to close status 1007. Indicates that an endpoint is terminating the connection because it has received a message that contains data that isn't consistent with the type of the message. MandatoryExtension Equivalent to close status 1010. Indicates that a client is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the handshake response. Normal Equivalent to close status 1000. Indicates normal close. NoStatus Equivalent to close status 1005. Indicates that no status code was actually present. A Reserved value. PolicyViolation Equivalent to close status 1008. Indicates that an endpoint is terminating the connection because it has received a message that violates its policy. ProtocolError Equivalent to close status 1002. Indicates that an endpoint is terminating the connection due to a protocol error. ServerError Equivalent to close status 1011. Indicates that a server is terminating the connection because it has encountered an unexpected condition that prevented it from fulfilling the request. TlsHandshakeFailure Equivalent to close status 1015. Indicates that the connection was closed due to a failure to perform a TLS handshake. A Reserved value. TooBig Equivalent to close status 1009. Indicates that an endpoint is terminating the connection because it has received a message that is too big to process. Undefined Equivalent to close status 1004. Still undefined. A Reserved value. UnsupportedData Equivalent to close status 1003. Indicates that an endpoint is terminating the connection because it has received a type of data that it cannot accept."
  },
  "api/Unosquare.Net.CookieCollection.html": {
    "href": "api/Unosquare.Net.CookieCollection.html",
    "title": "Class CookieCollection | Unosquare EmbedIO",
    "keywords": "Class CookieCollection Represents Cookie collection Inheritance System.Object CookieCollection Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class CookieCollection : ICollection Constructors | Improve this Doc View Source CookieCollection() Initializes a new instance of the CookieCollection class. Declaration public CookieCollection() Properties | Improve this Doc View Source Count Gets the number of cookies in the collection. Declaration public int Count { get; } Property Value Type Description System.Int32 An that represents the number of cookies in the collection. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the collection is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean true if the collection is read-only; otherwise, false . The default value is true . | Improve this Doc View Source IsSynchronized Gets a value indicating whether the access to the collection is thread safe. Declaration public bool IsSynchronized { get; } Property Value Type Description System.Boolean true if the access to the collection is thread safe; otherwise, false . The default value is false . | Improve this Doc View Source Item[Int32] Gets the at the specified index from the collection. Declaration public Cookie this[int index] { get; } Parameters Type Name Description System.Int32 index An that represents the zero-based index of the to find. Property Value Type Description Cookie A at the specified index in the collection. | Improve this Doc View Source Item[String] Gets the with the specified name from the collection. Declaration public Cookie this[string name] { get; } Parameters Type Name Description System.String name A that represents the name of the to find. Property Value Type Description Cookie A with the specified name in the collection. | Improve this Doc View Source SyncRoot Gets an object used to synchronize access to the collection. Declaration public Object SyncRoot { get; } Property Value Type Description Object An used to synchronize access to the collection. Methods | Improve this Doc View Source Add(Cookie) Adds the specified cookie to the collection. Declaration public void Add(Cookie cookie) Parameters Type Name Description Cookie cookie A to add. | Improve this Doc View Source Add(CookieCollection) Adds the specified cookies to the collection. Declaration public void Add(CookieCollection cookies) Parameters Type Name Description CookieCollection cookies A CookieCollection that contains the cookies to add. | Improve this Doc View Source CopyTo(Array, Int32) Copies the elements of the collection to the specified , starting at the specified index in the array . Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array An that represents the destination of the elements copied from the collection. System.Int32 index An that represents the zero-based index in array at which copying begins. | Improve this Doc View Source CopyTo(Cookie[], Int32) Copies the elements of the collection to the specified array of , starting at the specified index in the array . Declaration public void CopyTo(Cookie[] array, int index) Parameters Type Name Description Cookie [] array An array of that represents the destination of the elements copied from the collection. System.Int32 index An that represents the zero-based index in array at which copying begins. | Improve this Doc View Source GetEnumerator() Gets the enumerator used to iterate through the collection. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An instance used to iterate through the collection."
  },
  "api/Unosquare.Net.HttpListenerContext.html": {
    "href": "api/Unosquare.Net.HttpListenerContext.html",
    "title": "Class HttpListenerContext | Unosquare EmbedIO",
    "keywords": "Class HttpListenerContext Provides access to the request and response objects used by the HttpListener class. This class cannot be inherited. Inheritance System.Object HttpListenerContext Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public sealed class HttpListenerContext : object Properties | Improve this Doc View Source Request Gets the request. Declaration public HttpListenerRequest Request { get; } Property Value Type Description HttpListenerRequest The request. | Improve this Doc View Source Response Gets the response. Declaration public HttpListenerResponse Response { get; } Property Value Type Description HttpListenerResponse The response. | Improve this Doc View Source User Gets the user. Declaration public IPrincipal User { get; } Property Value Type Description IPrincipal The user. Methods | Improve this Doc View Source AcceptWebSocket(String) Accepts a WebSocket handshake request. Declaration public WebSocketContext AcceptWebSocket(string protocol) Parameters Type Name Description System.String protocol A that represents the subprotocol supported on this WebSocket connection. Returns Type Description WebSocketContext A WebSocketContext that represents the WebSocket handshake request. Extension Methods Extensions.GetSession(HttpListenerContext, WebServer) Extensions.DeleteSession(HttpListenerContext, WebServer) Extensions.RequestPath(HttpListenerContext) Extensions.RequestPathCaseSensitive(HttpListenerContext) Extensions.RequestVerb(HttpListenerContext) Extensions.QueryString(HttpListenerContext, String) Extensions.InQueryString(HttpListenerContext, String) Extensions.RequestHeader(HttpListenerContext, String) Extensions.HasRequestHeader(HttpListenerContext, String) Extensions.RequestBody(HttpListenerContext) Extensions.NoCache(HttpListenerContext) Extensions.Redirect(HttpListenerContext, String, Boolean) Extensions.JsonResponse(HttpListenerContext, Object) Extensions.JsonResponse(HttpListenerContext, String) Extensions.ParseJson<T>(HttpListenerContext) Extensions.RequestFormDataDictionary(HttpListenerContext)"
  },
  "api/Unosquare.Net.HttpListenerException.html": {
    "href": "api/Unosquare.Net.HttpListenerException.html",
    "title": "Class HttpListenerException | Unosquare EmbedIO",
    "keywords": "Class HttpListenerException Represents an HTTP Listener's exception Inheritance System.Object HttpListenerException Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class HttpListenerException : Win32Exception Constructors | Improve this Doc View Source HttpListenerException() Initializes a new instance of the HttpListenerException class. Declaration public HttpListenerException() | Improve this Doc View Source HttpListenerException(Int32) Initializes a new instance of the HttpListenerException class. Declaration public HttpListenerException(int errorCode) Parameters Type Name Description System.Int32 errorCode The error code. | Improve this Doc View Source HttpListenerException(Int32, String) Initializes a new instance of the HttpListenerException class. Declaration public HttpListenerException(int errorCode, string message) Parameters Type Name Description System.Int32 errorCode The error code. System.String message The message. Properties | Improve this Doc View Source ErrorCode Gets the error code. Declaration public int ErrorCode { get; } Property Value Type Description System.Int32 The error code."
  },
  "api/Unosquare.Net.MessageEventArgs.html": {
    "href": "api/Unosquare.Net.MessageEventArgs.html",
    "title": "Class MessageEventArgs | Unosquare EmbedIO",
    "keywords": "Class MessageEventArgs Represents the event data for the OnMessage event. Inheritance System.Object MessageEventArgs Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class MessageEventArgs : EventArgs Remarks That event occurs when the WebSocket receives a message or a ping if the EmitOnPing property is set to true . If you would like to get the message data, you should access the Data or RawData property. Properties | Improve this Doc View Source Data Gets the message data as a . Declaration public string Data { get; } Property Value Type Description System.String A that represents the message data if its type is text or ping and if decoding it to a string has successfully done; otherwise, null . | Improve this Doc View Source IsBinary Gets a value indicating whether the message type is binary. Declaration public bool IsBinary { get; } Property Value Type Description System.Boolean true if the message type is binary; otherwise, false . | Improve this Doc View Source IsPing Gets a value indicating whether the message type is ping. Declaration public bool IsPing { get; } Property Value Type Description System.Boolean true if the message type is ping; otherwise, false . | Improve this Doc View Source IsText Gets a value indicating whether the message type is text. Declaration public bool IsText { get; } Property Value Type Description System.Boolean true if the message type is text; otherwise, false . | Improve this Doc View Source RawData Gets the message data as an array of . Declaration public byte[] RawData { get; } Property Value Type Description System.Byte [] An array of that represents the message data."
  },
  "api/Unosquare.Net.NetExtensions.html": {
    "href": "api/Unosquare.Net.NetExtensions.html",
    "title": "Class NetExtensions | Unosquare EmbedIO",
    "keywords": "Class NetExtensions Represents some System.NET custom extensions Inheritance System.Object NetExtensions Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public static class NetExtensions : object Fields | Improve this Doc View Source SchemeDelimiter The scheme delimiter Declaration public static readonly string SchemeDelimiter Field Value Type Description System.String | Improve this Doc View Source UriSchemeFile The URI scheme file Declaration public static readonly string UriSchemeFile Field Value Type Description System.String | Improve this Doc View Source UriSchemeFtp The URI scheme FTP Declaration public static readonly string UriSchemeFtp Field Value Type Description System.String | Improve this Doc View Source UriSchemeGopher The URI scheme gopher Declaration public static readonly string UriSchemeGopher Field Value Type Description System.String | Improve this Doc View Source UriSchemeHttp The URI scheme HTTP Declaration public static readonly string UriSchemeHttp Field Value Type Description System.String | Improve this Doc View Source UriSchemeHttps The URI scheme HTTPS Declaration public static readonly string UriSchemeHttps Field Value Type Description System.String | Improve this Doc View Source UriSchemeMailto The URI scheme mailto Declaration public static readonly string UriSchemeMailto Field Value Type Description System.String | Improve this Doc View Source UriSchemeNews The URI scheme news Declaration public static readonly string UriSchemeNews Field Value Type Description System.String | Improve this Doc View Source UriSchemeNntp The URI scheme NNTP Declaration public static readonly string UriSchemeNntp Field Value Type Description System.String Methods | Improve this Doc View Source Add(NameValueCollection, String) Parses and adds the data from a string into the specified Name-Value collection Declaration public static void Add(this NameValueCollection coll, string data) Parameters Type Name Description NameValueCollection coll The coll. System.String data The data. | Improve this Doc View Source Add(WebHeaderCollection, String) Parses and adds the data from a string into the specified Name-Value collection Declaration public static void Add(this WebHeaderCollection coll, string data) Parameters Type Name Description WebHeaderCollection coll The coll. System.String data The data. | Improve this Doc View Source BeginRead(Stream, Byte[], Int32, Int32, AsyncCallback, Object) Begins and asynchronous read of the specified stream Declaration public static IAsyncResult BeginRead(this Stream stream, byte[] buffer, int offset, int count, AsyncCallback callback, object state) Parameters Type Name Description Stream stream The stream. System.Byte [] buffer The buffer. System.Int32 offset The offset. System.Int32 count The count. AsyncCallback callback The callback. System.Object state The state. Returns Type Description IAsyncResult | Improve this Doc View Source Contains(NameValueCollection, String, String) Determines whether the specified contains the entry with the specified both name and value . Declaration public static bool Contains(this NameValueCollection collection, string name, string value) Parameters Type Name Description NameValueCollection collection A to test. System.String name A that represents the key of the entry to find. System.String value A that represents the value of the entry to find. Returns Type Description System.Boolean true if collection contains the entry with both name and value ; otherwise, false . | Improve this Doc View Source Contains(String, Char[]) Determines whether the specified contains any of characters in the specified array of . Declaration public static bool Contains(this string value, params char[] chars) Parameters Type Name Description System.String value A to test. System.Char [] chars An array of that contains characters to find. Returns Type Description System.Boolean true if value contains any of chars ; otherwise, false . | Improve this Doc View Source EndRead(Stream, IAsyncResult) Retrieve the result of an asynchronous read for the specified stream Declaration public static int EndRead(this Stream stream, IAsyncResult ares) Parameters Type Name Description Stream stream The stream. IAsyncResult ares The ares. Returns Type Description System.Int32 | Improve this Doc View Source GetCookies(NameValueCollection, Boolean) Gets the collection of the HTTP cookies from the specified HTTP headers . Declaration public static CookieCollection GetCookies(this NameValueCollection headers, bool response) Parameters Type Name Description NameValueCollection headers A that contains a collection of the HTTP headers. System.Boolean response true if headers is a collection of the response headers; otherwise, false . Returns Type Description CookieCollection A CookieCollection that receives a collection of the HTTP cookies. | Improve this Doc View Source GetLeftPart(Uri, UriPartial) Gets the left part of the specified URI, inclusive of the specified Uri Partial. Declaration public static string GetLeftPart(this Uri uri, UriPartial part) Parameters Type Name Description Uri uri The URI. UriPartial part The part. Returns Type Description System.String | Improve this Doc View Source IsHostOrder(Endianness) Determines whether the specified is host (this computer architecture) byte order. Declaration public static bool IsHostOrder(this Endianness order) Parameters Type Name Description Endianness order One of the enum values, to test. Returns Type Description System.Boolean true if order is host byte order; otherwise, false . | Improve this Doc View Source SubArray<T>(T[], Int32, Int32) Retrieves a sub-array from the specified array . A sub-array starts at the specified element position in array . Declaration public static T[] SubArray<T>(this T[] array, int startIndex, int length) Parameters Type Name Description T[] array An array of T from which to retrieve a sub-array. System.Int32 startIndex An that represents the zero-based starting position of a sub-array in array . System.Int32 length An that represents the number of elements to retrieve. Returns Type Description T[] An array of T that receives a sub-array, or an empty array of T if any problems with the parameters. Type Parameters Name Description T The type of elements in array . | Improve this Doc View Source SubArray<T>(T[], Int64, Int64) Retrieves a sub-array from the specified array . A sub-array starts at the specified element position in array . Declaration public static T[] SubArray<T>(this T[] array, long startIndex, long length) Parameters Type Name Description T[] array An array of T from which to retrieve a sub-array. System.Int64 startIndex A that represents the zero-based starting position of a sub-array in array . System.Int64 length A that represents the number of elements to retrieve. Returns Type Description T[] An array of T that receives a sub-array, or an empty array of T if any problems with the parameters. Type Parameters Name Description T The type of elements in array . | Improve this Doc View Source ToHostOrder(Byte[], Endianness) Converts the order of the specified array of to the host byte order. Declaration public static byte[] ToHostOrder(this byte[] source, Endianness sourceOrder) Parameters Type Name Description System.Byte [] source An array of to convert. Endianness sourceOrder One of the enum values, specifies the byte order of source . Returns Type Description System.Byte [] An array of converted from source ."
  },
  "api/Unosquare.Net.ResponseStream.html": {
    "href": "api/Unosquare.Net.ResponseStream.html",
    "title": "Class ResponseStream | Unosquare EmbedIO",
    "keywords": "Class ResponseStream FIXME: Does this buffer the response until Close? Update: we send a single packet for the first non-chunked Write What happens when we set content-length to X and write X-1 bytes then close? what if we don't set content-length at all? Inheritance System.Object ResponseStream Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class ResponseStream : Stream Properties | Improve this Doc View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean | Improve this Doc View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean | Improve this Doc View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Close() Closes this instance. Declaration public void Close() | Improve this Doc View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and ( offset + count - 1) replaced by the bytes read from the current source. System.Int32 offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. System.Int32 count The maximum number of bytes to be read from the current stream. Returns Type Description System.Int32 The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. | Improve this Doc View Source Seek(Int64, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description System.Int64 The new position within the current stream. | Improve this Doc View Source SetLength(Int64) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value The desired length of the current stream in bytes. | Improve this Doc View Source Write(Byte[], Int32, Int32) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer An array of bytes. This method copies count bytes from buffer to the current stream. System.Int32 offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. System.Int32 count The number of bytes to be written to the current stream."
  },
  "api/Unosquare.Net.WebHeaderCollection.html": {
    "href": "api/Unosquare.Net.WebHeaderCollection.html",
    "title": "Class WebHeaderCollection | Unosquare EmbedIO",
    "keywords": "Class WebHeaderCollection Provides a collection of the HTTP headers associated with a request or response. Inheritance System.Object WebHeaderCollection Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class WebHeaderCollection : NameValueCollection Constructors | Improve this Doc View Source WebHeaderCollection() Initializes a new instance of the WebHeaderCollection class. Declaration public WebHeaderCollection() Properties | Improve this Doc View Source Item[System.Net.HttpRequestHeader] Gets or sets the specified request header in the collection. Declaration public string this[System.Net.HttpRequestHeader header] { get; set; } Parameters Type Name Description System.Net.HttpRequestHeader header One of the HttpRequestHeader enum values, represents the request header to get or set. Property Value Type Description System.String A that represents the value of the request header . | Improve this Doc View Source Item[System.Net.HttpResponseHeader] Gets or sets the specified response header in the collection. Declaration public string this[System.Net.HttpResponseHeader header] { get; set; } Parameters Type Name Description System.Net.HttpResponseHeader header One of the HttpResponseHeader enum values, represents the response header to get or set. Property Value Type Description System.String A that represents the value of the response header . Methods | Improve this Doc View Source Add(System.Net.HttpRequestHeader, String) Adds the specified request header with the specified value to the collection. Declaration public void Add(System.Net.HttpRequestHeader header, string value) Parameters Type Name Description System.Net.HttpRequestHeader header One of theHttpRequestHeader enum values, represents the request header to add. System.String value A that represents the value of the header to add. | Improve this Doc View Source Add(System.Net.HttpResponseHeader, String) Adds the specified response header with the specified value to the collection. Declaration public void Add(System.Net.HttpResponseHeader header, string value) Parameters Type Name Description System.Net.HttpResponseHeader header One of the enum values, represents the response header to add. System.String value A that represents the value of the header to add. | Improve this Doc View Source Add(String) Adds the specified header to the collection. Declaration public void Add(string header) Parameters Type Name Description System.String header A that represents the header with the name and value separated by a colon ( ':' ). | Improve this Doc View Source Add(String, String) Adds a header with the specified name and value to the collection. Declaration public override void Add(string name, string value) Parameters Type Name Description System.String name A that represents the name of the header to add. System.String value A that represents the value of the header to add. | Improve this Doc View Source AddWithoutValidate(String, String) Adds a header to the collection without checking if the header is on the restricted header list. Declaration public void AddWithoutValidate(string headerName, string headerValue) Parameters Type Name Description System.String headerName A that represents the name of the header to add. System.String headerValue A that represents the value of the header to add. | Improve this Doc View Source Clear() Removes all headers from the collection. Declaration public override void Clear() | Improve this Doc View Source GetValues(Int32) Gets an array of header values stored in the specified index position of the collection. Declaration public override string[] GetValues(int index) Parameters Type Name Description System.Int32 index An that represents the zero-based index of the header to find. Returns Type Description System.String [] An array of that receives the header values if found; otherwise, null . | Improve this Doc View Source GetValues(String) Gets an array of header values stored in the specified header . Declaration public override string[] GetValues(string header) Parameters Type Name Description System.String header A that represents the name of the header to find. Returns Type Description System.String [] An array of that receives the header values if found; otherwise, null . | Improve this Doc View Source IsRestricted(String) Determines whether the specified header can be set for the request. Declaration public static bool IsRestricted(string headerName) Parameters Type Name Description System.String headerName A that represents the name of the header to test. Returns Type Description System.Boolean true if the header is restricted; otherwise, false . | Improve this Doc View Source IsRestricted(String, Boolean) Determines whether the specified header can be set for the request or the response. Declaration public static bool IsRestricted(string headerName, bool response) Parameters Type Name Description System.String headerName A that represents the name of the header to test. System.Boolean response true if does the test for the response; for the request, false . Returns Type Description System.Boolean true if the header is restricted; otherwise, false . | Improve this Doc View Source Remove(System.Net.HttpRequestHeader) Removes the specified request header from the collection. Declaration public void Remove(System.Net.HttpRequestHeader header) Parameters Type Name Description System.Net.HttpRequestHeader header One of theHttpRequestHeader enum values, represents the request header to remove. | Improve this Doc View Source Remove(System.Net.HttpResponseHeader) Removes the specified response header from the collection. Declaration public void Remove(System.Net.HttpResponseHeader header) Parameters Type Name Description System.Net.HttpResponseHeader header One of the enum values, represents the response header to remove. | Improve this Doc View Source Remove(String) Removes the specified header from the collection. Declaration public override void Remove(string name) Parameters Type Name Description System.String name A that represents the name of the header to remove. | Improve this Doc View Source Set(System.Net.HttpRequestHeader, String) Sets the specified request header to the specified value. Declaration public void Set(System.Net.HttpRequestHeader header, string value) Parameters Type Name Description System.Net.HttpRequestHeader header One of theHttpRequestHeader enum values, represents the request header to set. System.String value A that represents the value of the request header to set. | Improve this Doc View Source Set(System.Net.HttpResponseHeader, String) Sets the specified response header to the specified value. Declaration public void Set(System.Net.HttpResponseHeader header, string value) Parameters Type Name Description System.Net.HttpResponseHeader header One of the enum values, represents the response header to set. System.String value A that represents the value of the response header to set. | Improve this Doc View Source Set(String, String) Sets the specified header to the specified value. Declaration public override void Set(string name, string value) Parameters Type Name Description System.String name A that represents the name of the header to set. System.String value A that represents the value of the header to set. | Improve this Doc View Source ToString() Returns a that represents the current WebHeaderCollection . Declaration public override string ToString() Returns Type Description System.String A that represents the current WebHeaderCollection . Extension Methods NetExtensions.Add(WebHeaderCollection, String)"
  },
  "api/Unosquare.Net.WebSocketReceiveResult.html": {
    "href": "api/Unosquare.Net.WebSocketReceiveResult.html",
    "title": "Class WebSocketReceiveResult | Unosquare EmbedIO",
    "keywords": "Class WebSocketReceiveResult Represents a WS Receive result Inheritance System.Object WebSocketReceiveResult Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public class WebSocketReceiveResult : object Constructors | Improve this Doc View Source WebSocketReceiveResult(Int32, WebSocketMessageType, Boolean) Initializes a new instance of the WebSocketReceiveResult class. Declaration public WebSocketReceiveResult(int count, WebSocketMessageType messageType, bool endOfMessage) Parameters Type Name Description System.Int32 count The count. WebSocketMessageType messageType Type of the message. System.Boolean endOfMessage if set to true [end of message]. Properties | Improve this Doc View Source Count Gets the count. Declaration public int Count { get; } Property Value Type Description System.Int32 The count. | Improve this Doc View Source EndOfMessage Gets a value indicating whether [end of message]. Declaration public bool EndOfMessage { get; } Property Value Type Description System.Boolean true if [end of message]; otherwise, false . | Improve this Doc View Source MessageType Gets the type of the message. Declaration public WebSocketMessageType MessageType { get; } Property Value Type Description WebSocketMessageType The type of the message."
  },
  "api/Unosquare.Net.WebSocketState.html": {
    "href": "api/Unosquare.Net.WebSocketState.html",
    "title": "Enum WebSocketState | Unosquare EmbedIO",
    "keywords": "Enum WebSocketState Indicates the state of a WebSocket connection. Namespace :Unosquare.Net Assembly :Unosquare.Labs.EmbedIO.dll Syntax public enum WebSocketState : ushort Remarks The values of this enumeration are defined in The WebSocket API . Fields Name Description Closed Equivalent to numeric value 3. Indicates that the connection has been closed or couldn't be established. Closing Equivalent to numeric value 2. Indicates that the connection is going through the closing handshake, or the WebSocket.Close method has been invoked. Connecting Equivalent to numeric value 0. Indicates that the connection hasn't yet been established. Open Equivalent to numeric value 1. Indicates that the connection has been established, and the communication is possible."
  },
  "api/Unosquare.Net.html": {
    "href": "api/Unosquare.Net.html",
    "title": "Namespace Unosquare.Net | Unosquare EmbedIO",
    "keywords": "Namespace Unosquare.Net Classes AsyncResult Represents an asynchronous operation result. CloseEventArgs Represents the event data for the OnClose event. CookieCollection Represents Cookie collection HttpListener The MONO implementation of the standard Http Listener class HttpListenerContext Provides access to the request and response objects used by the HttpListener class. This class cannot be inherited. HttpListenerException Represents an HTTP Listener's exception HttpListenerPrefixCollection Represents a collection of HTTP listener profixes HttpListenerRequest Represents an HTTP Listener's request HttpListenerResponse Represents an HTTP Listener's response HttpVersion MessageEventArgs Represents the event data for the OnMessage event. NetExtensions Represents some System.NET custom extensions ResponseStream FIXME: Does this buffer the response until Close? Update: we send a single packet for the first non-chunked Write What happens when we set content-length to X and write X-1 bytes then close? what if we don't set content-length at all? WebHeaderCollection Provides a collection of the HTTP headers associated with a request or response. WebSocket Implements the WebSocket interface. WebSocketContext Provides the properties used to access the information in a WebSocket handshake request received by the HttpListener . WebSocketException The exception that is thrown when a WebSocket gets a fatal error. WebSocketReceiveResult Represents a WS Receive result Enums CloseStatusCode Indicates the status code for the WebSocket connection close. WebSocketMessageType Enums WS Message Type WebSocketState Indicates the state of a WebSocket connection. Delegates HttpListener.ExtendedProtectionSelector The EPP selector delegate for the supplied request"
  },
  "api/Unosquare.Labs.EmbedIO.AsyncResponseHandler.html": {
    "href": "api/Unosquare.Labs.EmbedIO.AsyncResponseHandler.html",
    "title": "Delegate AsyncResponseHandler | Unosquare EmbedIO",
    "keywords": "Delegate AsyncResponseHandler An async delegate that handles certain action in a module given a path and a verb Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public delegate Task<bool> AsyncResponseHandler(WebServer server, HttpListenerContext context); Parameters Type Name Description WebServer server The server. HttpListenerContext context The context. Returns Type Description Task < System.Boolean >"
  },
  "api/Unosquare.Labs.EmbedIO.Constants.html": {
    "href": "api/Unosquare.Labs.EmbedIO.Constants.html",
    "title": "Class Constants | Unosquare EmbedIO",
    "keywords": "Class Constants Defines assembly-wide constants Inheritance System.Object Constants Namespace :Unosquare.Labs.EmbedIO Assembly :Unosquare.Labs.EmbedIO.dll Syntax public static class Constants : object Fields | Improve this Doc View Source ArgumentNullExceptionMessage The standard argument null exception message Declaration public const string ArgumentNullExceptionMessage = null Field Value Type Description System.String | Improve this Doc View Source BrowserTimeFormat Default Browser time format Declaration public const string BrowserTimeFormat = null Field Value Type Description System.String | Improve this Doc View Source CommaSplitChar The comma split character for String.Split method calls. Declaration public static readonly char[] CommaSplitChar Field Value Type Description System.Char [] | Improve this Doc View Source CookieHeader The cookie header Declaration public const string CookieHeader = null Field Value Type Description System.String | Improve this Doc View Source CorsWildcard Default CORS rule Declaration public const string CorsWildcard = null Field Value Type Description System.String | Improve this Doc View Source DefaultEncoding The default encoding Declaration public static Encoding DefaultEncoding Field Value Type Description Encoding | Improve this Doc View Source DefaultMimeTypes A big list of default MIME types Originally started from: http://stackoverflow.com/questions/1029740/get-mime-type-from-filename-extension Declaration public static readonly Dictionary<string, string> DefaultMimeTypes Field Value Type Description Dictionary < System.String , System.String > | Improve this Doc View Source HeaderAcceptEncoding Accept-Encoding HTTP Header Declaration public const string HeaderAcceptEncoding = null Field Value Type Description System.String | Improve this Doc View Source HeaderAcceptRanges Accept-Ranges HTTP Header Declaration public const string HeaderAcceptRanges = null Field Value Type Description System.String | Improve this Doc View Source HeaderAccessControlAllowHeaders Access-Control-Allow-Headers HTTP Header Declaration public const string HeaderAccessControlAllowHeaders = null Field Value Type Description System.String | Improve this Doc View Source HeaderAccessControlAllowMethods Access-Control-Allow-Methods HTTP Header Declaration public const string HeaderAccessControlAllowMethods = null Field Value Type Description System.String | Improve this Doc View Source HeaderAccessControlAllowOrigin Access-Control-Allow-Origin HTTP Header Declaration public const string HeaderAccessControlAllowOrigin = null Field Value Type Description System.String | Improve this Doc View Source HeaderAccessControlRequestHeaders Access-Control-Request-Headers HTTP Header Declaration public const string HeaderAccessControlRequestHeaders = null Field Value Type Description System.String | Improve this Doc View Source HeaderAccessControlRequestMethod Access-Control-Request-Headers HTTP Method Declaration public const string HeaderAccessControlRequestMethod = null Field Value Type Description System.String | Improve this Doc View Source HeaderCacheControl Cache-Control HTTP Header Declaration public const string HeaderCacheControl = null Field Value Type Description System.String | Improve this Doc View Source HeaderCompressionGzip The header compression gzip Declaration public const string HeaderCompressionGzip = null Field Value Type Description System.String | Improve this Doc View Source HeaderContentEncoding Content-Encoding HTTP Header Declaration public const string HeaderContentEncoding = null Field Value Type Description System.String | Improve this Doc View Source HeaderContentLength Content-Length HTTP Header Declaration public const string HeaderContentLength = null Field Value Type Description System.String | Improve this Doc View Source HeaderContentRanges Content-Range HTTP Header Declaration public const string HeaderContentRanges = null Field Value Type Description System.String | Improve this Doc View Source HeaderETag ETag HTTP Header Declaration public const string HeaderETag = null Field Value Type Description System.String | Improve this Doc View Source HeaderExpires Expires HTTP Header Declaration public const string HeaderExpires = null Field Value Type Description System.String | Improve this Doc View Source HeaderIfModifiedSince If-Modified-Since HTTP Header Declaration public const string HeaderIfModifiedSince = null Field Value Type Description System.String | Improve this Doc View Source HeaderIfNotMatch If-None-Match HTTP Header Declaration public const string HeaderIfNotMatch = null Field Value Type Description System.String | Improve this Doc View Source HeaderLastModified Last-Modified HTTP Header Declaration public const string HeaderLastModified = null Field Value Type Description System.String | Improve this Doc View Source HeaderOrigin Origin HTTP Header Declaration public const string HeaderOrigin = null Field Value Type Description System.String | Improve this Doc View Source HeaderPragma Pragma HTTP Header Declaration public const string HeaderPragma = null Field Value Type Description System.String | Improve this Doc View Source HeaderRange Range HTTP Header Declaration public const string HeaderRange = null Field Value Type Description System.String | Improve this Doc View Source Response404Html Default Http Status 404 response output Declaration public const string Response404Html = null Field Value Type Description System.String | Improve this Doc View Source Response500HtmlFormat Default Http Status 500 response output The first format argument takes the error message. The second format argument takes the stack trace. Declaration public const string Response500HtmlFormat = null Field Value Type Description System.String | Improve this Doc View Source StandardCultureInfo The format culture used for header outputs Declaration public static readonly CultureInfo StandardCultureInfo Field Value Type Description CultureInfo | Improve this Doc View Source StandardStringComparer The standard string comparer Declaration public static StringComparer StandardStringComparer Field Value Type Description StringComparer | Improve this Doc View Source StaticFileStringComparer The static file string comparer Declaration public static StringComparer StaticFileStringComparer Field Value Type Description StringComparer"
  }
}